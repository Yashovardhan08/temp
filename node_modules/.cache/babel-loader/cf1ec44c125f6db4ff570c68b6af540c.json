{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n  return function (source) {\n    return source.lift(new WindowToggleOperator(openings, closingSelector));\n  };\n}\nvar WindowToggleOperator = /*@__PURE__*/function () {\n  function WindowToggleOperator(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n  WindowToggleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  };\n  return WindowToggleOperator;\n}();\nvar WindowToggleSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(WindowToggleSubscriber, _super);\n  function WindowToggleSubscriber(destination, openings, closingSelector) {\n    var _this = _super.call(this, destination) || this;\n    _this.openings = openings;\n    _this.closingSelector = closingSelector;\n    _this.contexts = [];\n    _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));\n    return _this;\n  }\n  WindowToggleSubscriber.prototype._next = function (value) {\n    var contexts = this.contexts;\n    if (contexts) {\n      var len = contexts.length;\n      for (var i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  };\n  WindowToggleSubscriber.prototype._error = function (err) {\n    var contexts = this.contexts;\n    this.contexts = null;\n    if (contexts) {\n      var len = contexts.length;\n      var index = -1;\n      while (++index < len) {\n        var context_1 = contexts[index];\n        context_1.window.error(err);\n        context_1.subscription.unsubscribe();\n      }\n    }\n    _super.prototype._error.call(this, err);\n  };\n  WindowToggleSubscriber.prototype._complete = function () {\n    var contexts = this.contexts;\n    this.contexts = null;\n    if (contexts) {\n      var len = contexts.length;\n      var index = -1;\n      while (++index < len) {\n        var context_2 = contexts[index];\n        context_2.window.complete();\n        context_2.subscription.unsubscribe();\n      }\n    }\n    _super.prototype._complete.call(this);\n  };\n  WindowToggleSubscriber.prototype._unsubscribe = function () {\n    var contexts = this.contexts;\n    this.contexts = null;\n    if (contexts) {\n      var len = contexts.length;\n      var index = -1;\n      while (++index < len) {\n        var context_3 = contexts[index];\n        context_3.window.unsubscribe();\n        context_3.subscription.unsubscribe();\n      }\n    }\n  };\n  WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (outerValue === this.openings) {\n      var closingNotifier = void 0;\n      try {\n        var closingSelector = this.closingSelector;\n        closingNotifier = closingSelector(innerValue);\n      } catch (e) {\n        return this.error(e);\n      }\n      var window_1 = new Subject();\n      var subscription = new Subscription();\n      var context_4 = {\n        window: window_1,\n        subscription: subscription\n      };\n      this.contexts.push(context_4);\n      var innerSubscription = subscribeToResult(this, closingNotifier, context_4);\n      if (innerSubscription.closed) {\n        this.closeWindow(this.contexts.length - 1);\n      } else {\n        innerSubscription.context = context_4;\n        subscription.add(innerSubscription);\n      }\n      this.destination.next(window_1);\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  };\n  WindowToggleSubscriber.prototype.notifyError = function (err) {\n    this.error(err);\n  };\n  WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf(inner.context));\n    }\n  };\n  WindowToggleSubscriber.prototype.closeWindow = function (index) {\n    if (index === -1) {\n      return;\n    }\n    var contexts = this.contexts;\n    var context = contexts[index];\n    var window = context.window,\n      subscription = context.subscription;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  };\n  return WindowToggleSubscriber;\n}(OuterSubscriber);","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,OAAS,MAAM;AACxB,SAASC,eAAc,YAAM;AAC7B,SAASC,oBAAiB,iBAAM;AAEhC,SAASC,uBAAmB,oBAAM;AAmDlC,SAAMC,iBAAU,QAAmB,2BACkD;OACnF,SAAOC,YAAsB,SAAK,iBAAgB;EACnD;IAAA;EAAA;AAED;IAEEC,oCAA2C,YACvB;WADAA,oBAAuB;IACvB;IACnB;EAED;sBACgB,UAAU,KAAI,uBAC1B,QAAU,EAAE;IAEf;EACH;EAXA,OAWCA;AAYD;IAA2CC,gDAAuBC;EAIhER,wCAAY,QACQ;WADpBO,sBAGE,YAAM,EAAWE,QAAC,EAEnBC;IAJmB,4BAAuB;IACvBC;IALZA,qBAAkC;IAOxCA,KAAI,CAACC,QAAI,GAAK;;IACf;EAES;wBACA,UAAQ,CAAUC;IAC1B,IAAID,QAAQ,GAAE;QACZA,QAAS,EAAG;MACZ,OAAK,GAAKA,QAAO,OAAQ;WACvB,QAAS,CAAC,EAAEE,OAAO,KAAK;QACzBF;MACF;IACF;EAES;wBAEA,UAAQ,CAAUG;IAC1B,IAAIH,QAAC,GAAQ,IAAG,CAAIA,QAAC;IAErB,IAAI,SAAQ,GAAE;QACZA,QAAS,EAAG;MACZ,IAAII,MAAKJ,QAAM;MAEf,SAAS,KAAK;aACZ,EAAMK,QAAOD,GAAG;QAChB,aAAQ,GAAMJ,QAAO,MAAK;QAC1BM,SAAO,CAACC,YAAY,CAACC;QACtBF;MACF;IAED;IACDV;EAES;wBACA,UAAQ,CAAUa;IAC1B,IAAIT,QAAC,GAAQ,IAAG,CAAIA,QAAC;IACrB,IAAI,SAAQ,GAAE;QACZA,QAAS,EAAG;MACZ,IAAII,MAAKJ,QAAM;MACf,SAAS,KAAK;aACZ,EAAMK,QAAOD,GAAG;QAChB,aAAQ,GAAMJ,QAAC,CAAQK,KAAG;QAC1BK,SAAO,CAACH,eAAa;QACtBG;MACF;IACD;IACDd;EAGD;wBACU,UAAQ,CAAUe;IAC1B,IAAIX,QAAC,GAAQ,IAAG,CAAIA,QAAC;IACrB,IAAI,SAAQ,GAAE;QACZA,QAAS,EAAG;MACZ,IAAII,MAAKJ,QAAM;MACf,SAAS,KAAK;aACZ,EAAMK,QAAOD,GAAG;QAChB,aAAQ,GAAMJ,QAAC,MAAa,CAAC;QAC7BY,SAAO,CAACL,kBAAa;QACtBK;MACF;IACF;EAED;wBAIgB,CAAKC,SAAK,WAAU;QAChCC,UAAI,SAAe,WAAC;MACpB,IAAIC;UACM;QACR,mBAAkB,uBAAgB;QACnCA;MAAC,SACAC;QACD;MAED;MACA,IAAMC,eAAe5B,OAAI;MACzB,IAAM6B,YAAU,GAAE,gBAAM,EAAE;MAC1B,IAAIC,SAAS,GAAC;QAAIZ,MAAC,UAAS;QAAAW;MAAA;MAC5B,IAAM,wBAAoB;MAE1B,IAAIE,iBAAiB,GAAC5B,iBAAQ;UAC5B4B,iBAAiB,OAAK;QACvB;aACO;QACNA,iBAAiB,oBAAmB;QACrCF;MAED;MACD;WACC;MACD;IACF;EAED;wBACkB;IACjB;EAED;wBACoB,CAACL,wBAAkB;QACnCQ,KAAK,0BAA0B;MAChC;IACF;EAEO;wBACY;QAChBhB,UAAO;MACR;IAEO;IACR,IAAML,QAAO,GAAG,aAAc;IACtB,4BAAM,CAAE;IAChB,UAAS,UAAO,CAAKO,MAAK;MAAAW;IAC1BlB,QAAO,OAAQ,MAAG;IAClBO,eAAa;IACdW;EACH;EA5H2C,6BA4H1C","names":["tslib_1","Subject","Subscription","OuterSubscriber","subscribeToResult","windowToggle","WindowToggleOperator","WindowToggleSubscriber","_super","openings","closingSelector","_this","contexts","_next","i","_error","len","index","context_1","window","err","_complete","context_2","_unsubscribe","context_3","prototype","outerValue","closingNotifier","e","window_1","subscription","context_4","innerSubscription","inner"],"sources":["../../../src/internal/operators/windowToggle.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}