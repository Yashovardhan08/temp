{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isArray } from '../util/isArray';\nimport { isScheduler } from '../util/isScheduler';\nexport function bindCallback(callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) {\n          return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args);\n        }));\n      };\n    }\n  }\n  return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var context = this;\n    var subject;\n    var params = {\n      context: context,\n      subject: subject,\n      callbackFunc: callbackFunc,\n      scheduler: scheduler\n    };\n    return new Observable(function (subscriber) {\n      if (!scheduler) {\n        if (!subject) {\n          subject = new AsyncSubject();\n          var handler = function () {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n              innerArgs[_i] = arguments[_i];\n            }\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n          try {\n            callbackFunc.apply(context, args.concat([handler]));\n          } catch (err) {\n            if (canReportError(subject)) {\n              subject.error(err);\n            } else {\n              console.warn(err);\n            }\n          }\n        }\n        return subject.subscribe(subscriber);\n      } else {\n        var state = {\n          args: args,\n          subscriber: subscriber,\n          params: params\n        };\n        return scheduler.schedule(dispatch, 0, state);\n      }\n    });\n  };\n}\nfunction dispatch(state) {\n  var _this = this;\n  var self = this;\n  var args = state.args,\n    subscriber = state.subscriber,\n    params = state.params;\n  var callbackFunc = params.callbackFunc,\n    context = params.context,\n    scheduler = params.scheduler;\n  var subject = params.subject;\n  if (!subject) {\n    subject = params.subject = new AsyncSubject();\n    var handler = function () {\n      var innerArgs = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        innerArgs[_i] = arguments[_i];\n      }\n      var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n      _this.add(scheduler.schedule(dispatchNext, 0, {\n        value: value,\n        subject: subject\n      }));\n    };\n    try {\n      callbackFunc.apply(context, args.concat([handler]));\n    } catch (err) {\n      subject.error(err);\n    }\n  }\n  this.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(state) {\n  var value = state.value,\n    subject = state.subject;\n  subject.next(value);\n  subject.complete();\n}\nfunction dispatchError(state) {\n  var err = state.err,\n    subject = state.subject;\n  subject.error(err);\n}","map":{"version":3,"mappings":"AACA;AACA,SAASA,kBAAc,eAAM;AAE7B,SAASC,YAAW,yBAAmB;AACvC,SAASC,6BAAsB;AAC/B,SAASC,cAAS,QAAM,wBAAkB;AAC1C,SAASC,eAAa,iBAAM;AA4K5B,SAAMC,WAAU,QAAY,qBAE1B;OAGA,SAAIC,YAAgB;MAClBC,cAAI,EAAY;QACdF,WAAS,CAAGE,cAAc,CAAC;MAC5BC;WAEC;aAAQ,YAAc;gBAAd;aAAA,0BAAc;;QAAK;QAEzB;UAAA;QAAA;MACH;IACF;EAED;SAA4B,YAAc;YAAd;SAAA,0BAAc;;IACxC;IACA,IAAIC,OAAwB,GAAC;IAC7B,IAAMC,OAAM;QACVC,SAAO;MACPF,OAAO;MACPC,gBAAY;MACZE,YAAS;MACTJ;IACF;WACE,IAAKR,UAAW;UACd,UAAK,EAAO;YACV,QAAO,EAAG;UACVU,OAAM,OAAUT;cAACY,sBAAmB;yBAAnB,GAAmB,EAAnB;iBAAA,iCAAmB;;YAClC;YACAH,OAAO,CAACI,cAAW;YACnBJ;UAEF;cACE;YACDE;UAAC,SACAG,GAAI;gBACFZ,cAAc,QAAK;cACpBO;mBACC;cACDM;YACF;UACF;QACD;QACD;aACC;YACEC,KAAI;UACJC;UAAAC;UAAAR;QACF;QACD;MACA;IACH;EACH;AAeD;SAAAS,cAqBC;EApBC,IAAMC,KAAI,GAAG,IAAK;EACV;EACA;IAAAF,kBAAc;IAAAR,cAAS;EACzB,sCAAmB;IAAAF;IAAAD;EACzB,IAAIE,OAAC,GAASC;MACZ,QAAO,EAAG;IAEVD,OAAM,SAAU;QAACG,sBAAmB;mBAAnB,GAAmB,EAAnB;WAAA,iCAAmB;;MAClC;MACA,SAAQ,GAACS,SAAU,OAAQ,IAAe,aAAe,CAAE,EAAE,YAAK;MAClED;QAAAE;QAAAb;MAAA;IAEF;QACE;MACDE;IAAC,SACAG,KAAQ;MACTL;IACF;EAED;EACD;AAOD;SACUc,kBAAK,EAAE;EACf,SAAQ,GAAIP,KAAC,CAAKM,KAAE;IAAAb;EACpBA,OAAO,CAACI,UAAU,CAAC;EACpBJ;AAOD;SACUe,cAAGR,KAAE;EACb,OAAO,GAACA,KAAM,IAAK;IAAAP;EACpBA","names":["Observable","AsyncSubject","map","canReportError","isArray","isScheduler","bindCallback","resultSelector","scheduler","context","subject","params","callbackFunc","handler","next","err","console","state","args","subscriber","dispatch","_this","innerArgs","value","dispatchNext","dispatchError"],"sources":["../../../src/internal/observable/bindCallback.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}