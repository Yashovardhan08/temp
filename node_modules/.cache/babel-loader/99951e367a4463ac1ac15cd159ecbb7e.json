{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race() {\n  var observables = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = observables[0];\n    } else {\n      return observables[0];\n    }\n  }\n  return fromArray(observables, undefined).lift(new RaceOperator());\n}\nvar RaceOperator = /*@__PURE__*/function () {\n  function RaceOperator() {}\n  RaceOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  };\n  return RaceOperator;\n}();\nexport { RaceOperator };\nvar RaceSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RaceSubscriber, _super);\n  function RaceSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n    _this.hasFirst = false;\n    _this.observables = [];\n    _this.subscriptions = [];\n    return _this;\n  }\n  RaceSubscriber.prototype._next = function (observable) {\n    this.observables.push(observable);\n  };\n  RaceSubscriber.prototype._complete = function () {\n    var observables = this.observables;\n    var len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (var i = 0; i < len && !this.hasFirst; i++) {\n        var observable = observables[i];\n        var subscription = subscribeToResult(this, observable, undefined, i);\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  };\n  RaceSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n      for (var i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          var subscription = this.subscriptions[i];\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n      this.subscriptions = null;\n    }\n    this.destination.next(innerValue);\n  };\n  return RaceSubscriber;\n}(OuterSubscriber);\nexport { RaceSubscriber };","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,OAAS,MAAM;AACxB,SAASC,eAAW,iBAAoB;AAKxC,SAASC,iBAAiB,aAAM;AAEhC,SAASC,uBAAmB,oBAAM;AAoDlC,SAAMC,iBAAc;OAAI;iBAAsC,GAAtC;OAAA,iCAAsC;;EAG5D;MACEC,WAAW,CAACC,WAAW,CAAC,EAAE;QACxBL,mBAAc,MAAW;MAC1BI;WACC;MACD;IACF;EAED;EACD;AAED;IAAAE;EAIA,SAACA,gBAHC;cACS,UAAO,KAAS,GAAC,UAAIC,UAAe,QAAW,EAAE;IACzD;EACH;EAJA,OAICD;;AAOD;IAAuCE,wCAAqBC;EAK1DV,gCAAY,QAA0B;WAAtCS,cACE,YAAM;IALA,kBAAoB,KAAM;IAC1BE,iBAAW,KAAwB;IACnCA,oBAAa,EAAmB;;IAIvC;EAES;gBACH,UAAY,CAAIC,KAAC,aAAYC;IACnC;EAES;gBACF,UAAc,UAAK,eAAY;IACrC,IAAMR,WAAM,OAAY,YAAO;IAE/B,IAAIS,GAAG,cAAQ;QACbA,QAAK;MACN;WACC;WACE,IAAMC,WAAUD,GAAG,SAAW,CAACE,QAAG;QAClC,IAAMH,aAAYR,WAAG;QAErB,IAAIY,YAAK,oBAAe;YACtB,IAAI,CAACC,aAAa,EAAC;UACpB;QACD;QACD;MACD;MACD;IACF;EAED;gBAEY,UAAU;QAClB,KAAK,SAAQ,EAAG;MAEhB,KAAKF,QAAQ,GAAG,IAAI;WAClB,IAAKD,KAAK,UAAU,cAAE;YACpBA,MAAII,UAAY;UAEhB,gBAAa,QAAWD,aAAG;UAC3BD,YAAY,YAAY,EAAE;UAC3B;QACF;MAED;MACD;IAED;IACD;EACH;EApDuC,qBAoDtC","names":["tslib_1","isArray","fromArray","OuterSubscriber","subscribeToResult","observables","length","RaceOperator","subscriber","RaceSubscriber","_super","_this","_next","observable","len","i","hasFirst","subscription","subscriptions","outerIndex"],"sources":["../../../src/internal/observable/race.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}