{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n  return function (source) {\n    return source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n  };\n}\nvar MergeScanOperator = /*@__PURE__*/function () {\n  function MergeScanOperator(accumulator, seed, concurrent) {\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.concurrent = concurrent;\n  }\n  MergeScanOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n  };\n  return MergeScanOperator;\n}();\nexport { MergeScanOperator };\nvar MergeScanSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(MergeScanSubscriber, _super);\n  function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n    var _this = _super.call(this, destination) || this;\n    _this.accumulator = accumulator;\n    _this.acc = acc;\n    _this.concurrent = concurrent;\n    _this.hasValue = false;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n  MergeScanSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      var index = this.index++;\n      var destination = this.destination;\n      var ish = void 0;\n      try {\n        var accumulator = this.accumulator;\n        ish = accumulator(this.acc, value, index);\n      } catch (e) {\n        return destination.error(e);\n      }\n      this.active++;\n      this._innerSub(ish);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n  MergeScanSubscriber.prototype._innerSub = function (ish) {\n    var innerSubscriber = new SimpleInnerSubscriber(this);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    var innerSubscription = innerSubscribe(ish, innerSubscriber);\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  };\n  MergeScanSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  };\n  MergeScanSubscriber.prototype.notifyNext = function (innerValue) {\n    var destination = this.destination;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  };\n  MergeScanSubscriber.prototype.notifyComplete = function () {\n    var buffer = this.buffer;\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  };\n  return MergeScanSubscriber;\n}(SimpleOuterSubscriber);\nexport { MergeScanSubscriber };","map":{"version":3,"mappings":";AAKA,OAAO,KAAEA,oBAAuB;AAyChC,SAAMC,qBAA0B,uBAEA,EAA6CC;OAA7C,gDAA4B;EAC1D,cAAO,KAAC,KAAqB,GAAK;IACnCC;EAED;EACE;IAAoB,aACA,KAAO,CACP,qBAAkB;EAAA;;qBADlB,GAAI,aAAG;WACPC,6BAAkB;IACrC;IAED;IACE,eAAc,aAAc;EAG9B;EACFA,2BAAC;IAAA;;EAOD;GAA+C;SAO7CA;uBAIE,gBAAM,UAAYC,QACnB;SAJmB,8BAAoE;WACpEC,mBAAM;IACN,kBAAU,CAAVC,WAAkBC;IAT9BC,iBAAoB,cAAM;IAC1BA;IACAA,gBAA4B,GAAGN;IAC/BM,cAAM,GAAa;IACjBA,kBAAkB;;IAO3BA;IAESA;IACR,OAAIA,KAAK;;qBAED,UAAc,CAAIC,KAAC,aAAYC;QACrC,IAAI,OAAG,OAAC;MACR,IAAIC;UACMJ;UACRK,GAAG,GAAG;UACP;QAAC,IAAQC,WAAE;QACVD,iBAAO,CAAW,IAAC,IAAQ,EAAEF;OAC9B,CACD,OAAKI;QACD,OAACP,WAAe;MACrB;UAAM;MACL,IAAI,CAACQ,SAAO,IAAK;KAClB,MACF;MAEO;IACN;;qBAEe,CAACC,mBAAiB;IACjC,IAAMC,kBAAiB,IAAGC,qBAAoB;IAI9C,IAAIX,kBAAiB,YAAK;eACxB,IAAW,CAACU,eAAI;QACjBE;IACF;MAESZ,iCAAS,CAAnB;IACE;;qBAEW,UAAQ,CAAKa,SAAO;qBACtB,OAAW;YACjB;MACD,IAAI,IAAC,SAAY,UAAW,EAAC;QAC9B;MACG;MACL;IAED;IACU;;qBAEK,CAAGJ,SAAK;IACrB,eAAY,GAAM,gBAAY;IAC/B;IAED;IACET,WAAY,KAAG,CAAIc,UAAQ;;qBAEhB,UAAY;QACrBC,MAAK,OAAM,OAAO;QACnB;cAAU,OAAK,GAAM;MACpB,IAAI,MAAK,OAAQ,MAAK;WAErB;MACD,IAAI,IAAC,SAAY,UAAW,EAAC;QAC9B;MACF;MACH,yBAAC;IA3E8C","names":["tslib_1","SimpleOuterSubscriber","innerSubscribe","concurrent","MergeScanOperator","_super","MergeScanSubscriber","call","destination","_this","_next","value","index","ish","accumulator","e","_innerSub","prototype","innerSubscriber","SimpleInnerSubscriber","innerSubscription","_complete","innerValue","buffer"],"sources":["../../../src/internal/operators/mergeScan.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}