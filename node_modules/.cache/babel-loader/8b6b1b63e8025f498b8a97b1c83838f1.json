{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletLinkProvider = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst util_1 = require(\"../util\");\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\nconst JSONRPC_1 = require(\"./JSONRPC\");\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\nconst LOCAL_STORAGE_ADDRESSES_KEY = \"Addresses\";\nclass WalletLinkProvider extends safe_event_emitter_1.default {\n  constructor(options) {\n    super();\n    this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n    this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n    this._relay = null;\n    this._addresses = [];\n    this.hasMadeFirstChainChangedEmission = false;\n    // true if mobile client has sent message to override jsonRpcUrl+chainId\n    this.isChainOverridden = false;\n    this._send = this.send;\n    this._sendAsync = this.sendAsync;\n    this.setProviderInfo = this.setProviderInfo.bind(this);\n    this.updateProviderInfo = this.updateProviderInfo.bind(this);\n    this.setAppInfo = this.setAppInfo.bind(this);\n    this.enable = this.enable.bind(this);\n    this.close = this.close.bind(this);\n    this.send = this.send.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    this.request = this.request.bind(this);\n    this._setAddresses = this._setAddresses.bind(this);\n    this.scanQRCode = this.scanQRCode.bind(this);\n    this.arbitraryRequest = this.arbitraryRequest.bind(this);\n    this.childRequestEthereumAccounts = this.childRequestEthereumAccounts.bind(this);\n    this._chainId = util_1.ensureIntNumber(options.chainId || 1);\n    this._jsonRpcUrl = options.jsonRpcUrl;\n    this._overrideIsMetaMask = options.overrideIsMetaMask;\n    this._relayProvider = options.relayProvider;\n    this._storage = options.storage;\n    this._relayEventManager = options.relayEventManager;\n    const chainIdStr = util_1.prepend0x(this._chainId.toString(16));\n    // indicate that we've connected, for EIP-1193 compliance\n    this.emit(\"connect\", {\n      chainIdStr\n    });\n    const cachedAddresses = this._storage.getItem(LOCAL_STORAGE_ADDRESSES_KEY);\n    if (cachedAddresses) {\n      const addresses = cachedAddresses.split(\" \");\n      if (addresses[0] !== \"\") {\n        this._addresses = addresses;\n        this.emit(\"accountsChanged\", addresses);\n      }\n    }\n    this._subscriptionManager.events.on(\"notification\", notification => {\n      this.emit(\"message\", {\n        type: notification.method,\n        data: notification.params\n      });\n    });\n    if (this._addresses.length > 0) {\n      this.initializeRelay();\n    }\n  }\n  get selectedAddress() {\n    return this._addresses[0] || undefined;\n  }\n  get networkVersion() {\n    return this._chainId.toString(10);\n  }\n  get chainId() {\n    return util_1.prepend0x(this._chainId.toString(16));\n  }\n  get isWalletLink() {\n    return true;\n  }\n  /**\n   * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n   * true for this method.\n   */\n  get isMetaMask() {\n    return this._overrideIsMetaMask;\n  }\n  get host() {\n    return this._jsonRpcUrl;\n  }\n  get connected() {\n    return true;\n  }\n  isConnected() {\n    return true;\n  }\n  setProviderInfo(jsonRpcUrl, chainId) {\n    if (this.isChainOverridden) return;\n    this.updateProviderInfo(jsonRpcUrl, chainId, false);\n  }\n  updateProviderInfo(jsonRpcUrl, chainId, fromRelay) {\n    if (fromRelay) this.isChainOverridden = true;\n    const originalChainId = this._chainId;\n    this._chainId = util_1.ensureIntNumber(chainId);\n    const chainChanged = this._chainId !== originalChainId;\n    this._jsonRpcUrl = jsonRpcUrl;\n    if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n      this.emit(\"chainChanged\", this._chainId);\n      this.hasMadeFirstChainChangedEmission = true;\n    }\n  }\n  setAppInfo(appName, appLogoUrl) {\n    this.initializeRelay().then(relay => relay.setAppInfo(appName, appLogoUrl));\n  }\n  async enable() {\n    if (this._addresses.length > 0) {\n      return this._addresses;\n    }\n    return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n  }\n  close() {\n    this.initializeRelay().then(relay => relay.resetAndReload());\n  }\n  send(requestOrMethod, callbackOrParams) {\n    // send<T>(method, params): Promise<T>\n    if (typeof requestOrMethod === \"string\") {\n      const method = requestOrMethod;\n      const params = Array.isArray(callbackOrParams) ? callbackOrParams : callbackOrParams !== undefined ? [callbackOrParams] : [];\n      const request = {\n        jsonrpc: \"2.0\",\n        id: 0,\n        method,\n        params\n      };\n      return this._sendRequestAsync(request).then(res => res.result);\n    }\n    // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n    if (typeof callbackOrParams === \"function\") {\n      const request = requestOrMethod;\n      const callback = callbackOrParams;\n      return this._sendAsync(request, callback);\n    }\n    // send(JSONRPCRequest[]): JSONRPCResponse[]\n    if (Array.isArray(requestOrMethod)) {\n      const requests = requestOrMethod;\n      return requests.map(r => this._sendRequest(r));\n    }\n    // send(JSONRPCRequest): JSONRPCResponse\n    const req = requestOrMethod;\n    return this._sendRequest(req);\n  }\n  sendAsync(request, callback) {\n    if (typeof callback !== \"function\") {\n      throw new Error(\"callback is required\");\n    }\n    // send(JSONRPCRequest[], callback): void\n    if (Array.isArray(request)) {\n      const arrayCb = callback;\n      this._sendMultipleRequestsAsync(request).then(responses => arrayCb(null, responses)).catch(err => arrayCb(err, null));\n      return;\n    }\n    // send(JSONRPCRequest, callback): void\n    const cb = callback;\n    this._sendRequestAsync(request).then(response => cb(null, response)).catch(err => cb(err, null));\n  }\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"Expected a single, non-array, object argument.\",\n        data: args\n      });\n    }\n    const {\n      method,\n      params\n    } = args;\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"'args.method' must be a non-empty string.\",\n        data: args\n      });\n    }\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"'args.params' must be an object or array if provided.\",\n        data: args\n      });\n    }\n    const newParams = params === undefined ? [] : params;\n    // WalletLink Requests\n    const id = this._relayEventManager.makeRequestId();\n    const result = await this._sendRequestAsync({\n      method,\n      params: newParams,\n      jsonrpc: \"2.0\",\n      id\n    });\n    return result.result;\n  }\n  async scanQRCode(match) {\n    const relay = await this.initializeRelay();\n    const res = await relay.scanQRCode(util_1.ensureRegExpString(match));\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n    return res.result;\n  }\n  async arbitraryRequest(data) {\n    const relay = await this.initializeRelay();\n    const res = await relay.arbitraryRequest(data);\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n    return res.result;\n  }\n  async childRequestEthereumAccounts(childSessionId, childSessionSecret, dappName, dappLogoURL, dappURL) {\n    const relay = await this.initializeRelay();\n    await relay.childRequestEthereumAccounts(childSessionId, childSessionSecret, dappName, dappLogoURL, dappURL);\n    return true;\n  }\n  supportsSubscriptions() {\n    return false;\n  }\n  subscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n  unsubscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n  disconnect() {\n    return true;\n  }\n  _sendRequest(request) {\n    const response = {\n      jsonrpc: \"2.0\",\n      id: request.id\n    };\n    const {\n      method\n    } = request;\n    response.result = this._handleSynchronousMethods(request);\n    if (response.result === undefined) {\n      throw new Error(`WalletLink does not support calling ${method} synchronously without ` + `a callback. Please provide a callback parameter to call ${method} ` + `asynchronously.`);\n    }\n    return response;\n  }\n  _setAddresses(addresses) {\n    if (!Array.isArray(addresses)) {\n      throw new Error(\"addresses is not an array\");\n    }\n    this._addresses = addresses.map(address => util_1.ensureAddressString(address));\n    this.emit(\"accountsChanged\", this._addresses);\n    this._storage.setItem(LOCAL_STORAGE_ADDRESSES_KEY, addresses.join(\" \"));\n    window.dispatchEvent(new CustomEvent(\"walletlink:addresses\", {\n      detail: this._addresses\n    }));\n  }\n  _sendRequestAsync(request) {\n    return new Promise((resolve, reject) => {\n      try {\n        const syncResult = this._handleSynchronousMethods(request);\n        if (syncResult !== undefined) {\n          return resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: syncResult\n          });\n        }\n        const filterPromise = this._handleAsynchronousFilterMethods(request);\n        if (filterPromise !== undefined) {\n          filterPromise.then(res => resolve(Object.assign(Object.assign({}, res), {\n            id: request.id\n          }))).catch(err => reject(err));\n          return;\n        }\n        const subscriptionPromise = this._handleSubscriptionMethods(request);\n        if (subscriptionPromise !== undefined) {\n          subscriptionPromise.then(res => resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: res.result\n          })).catch(err => reject(err));\n          return;\n        }\n      } catch (err) {\n        return reject(err);\n      }\n      this._handleAsynchronousMethods(request).then(res => resolve(Object.assign(Object.assign({}, res), {\n        id: request.id\n      }))).catch(err => reject(err));\n    });\n  }\n  _sendMultipleRequestsAsync(requests) {\n    return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n  }\n  _handleSynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_accounts:\n        return this._eth_accounts();\n      case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n        return this._eth_coinbase();\n      case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n        return this._eth_uninstallFilter(params);\n      case JSONRPC_1.JSONRPCMethod.net_version:\n        return this._net_version();\n      case JSONRPC_1.JSONRPCMethod.eth_chainId:\n        return this._eth_chainId();\n      default:\n        return undefined;\n    }\n  }\n  _handleAsynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n        return this._eth_requestAccounts();\n      case JSONRPC_1.JSONRPCMethod.eth_sign:\n        return this._eth_sign(params);\n      case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n        return this._eth_ecRecover(params);\n      case JSONRPC_1.JSONRPCMethod.personal_sign:\n        return this._personal_sign(params);\n      case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n        return this._personal_ecRecover(params);\n      case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n        return this._eth_signTransaction(params);\n      case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n        return this._eth_sendRawTransaction(params);\n      case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n        return this._eth_sendTransaction(params);\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n        return this._eth_signTypedData_v1(params);\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n        return this._throwUnsupportedMethodError();\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n        return this._eth_signTypedData_v3(params);\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n        return this._eth_signTypedData_v4(params);\n      case JSONRPC_1.JSONRPCMethod.walletlink_arbitrary:\n        return this._walletlink_arbitrary(params);\n    }\n    if (!this._jsonRpcUrl) throw Error(\"Error: No jsonRpcUrl provided\");\n    return window.fetch(this._jsonRpcUrl, {\n      method: \"POST\",\n      body: JSON.stringify(request),\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(json => {\n      if (!json) {\n        throw eth_rpc_errors_1.ethErrors.rpc.parse({});\n      }\n      const response = json;\n      const {\n        error\n      } = response;\n      if (error) {\n        throw eth_rpc_errors_1.serializeError(error);\n      }\n      return response;\n    });\n  }\n  _handleAsynchronousFilterMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n        return this._eth_newFilter(params);\n      case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n        return this._eth_newBlockFilter();\n      case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n        return this._eth_newPendingTransactionFilter();\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n        return this._eth_getFilterChanges(params);\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n        return this._eth_getFilterLogs(params);\n    }\n    return undefined;\n  }\n  _handleSubscriptionMethods(request) {\n    switch (request.method) {\n      case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n      case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n        return this._subscriptionManager.handleRequest(request);\n    }\n    return undefined;\n  }\n  _isKnownAddress(addressString) {\n    try {\n      const address = util_1.ensureAddressString(addressString);\n      return this._addresses.includes(address);\n    } catch (_a) {}\n    return false;\n  }\n  _ensureKnownAddress(addressString) {\n    if (!this._isKnownAddress(addressString)) {\n      throw new Error(\"Unknown Ethereum address\");\n    }\n  }\n  _prepareTransactionParams(tx) {\n    const fromAddress = tx.from ? util_1.ensureAddressString(tx.from) : this.selectedAddress;\n    if (!fromAddress) {\n      throw new Error(\"Ethereum address is unavailable\");\n    }\n    this._ensureKnownAddress(fromAddress);\n    const toAddress = tx.to ? util_1.ensureAddressString(tx.to) : null;\n    const weiValue = tx.value != null ? util_1.ensureBN(tx.value) : new bn_js_1.default(0);\n    const data = tx.data ? util_1.ensureBuffer(tx.data) : Buffer.alloc(0);\n    const nonce = tx.nonce != null ? util_1.ensureIntNumber(tx.nonce) : null;\n    const gasPriceInWei = tx.gasPrice != null ? util_1.ensureBN(tx.gasPrice) : null;\n    const gasLimit = tx.gas != null ? util_1.ensureBN(tx.gas) : null;\n    const chainId = this._chainId;\n    return {\n      fromAddress,\n      toAddress,\n      weiValue,\n      data,\n      nonce,\n      gasPriceInWei,\n      gasLimit,\n      chainId\n    };\n  }\n  _requireAuthorization() {\n    if (this._addresses.length === 0) {\n      throw eth_rpc_errors_1.ethErrors.provider.unauthorized({});\n    }\n  }\n  _throwUnsupportedMethodError() {\n    throw eth_rpc_errors_1.ethErrors.provider.unsupportedMethod({});\n  }\n  async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n    this._ensureKnownAddress(address);\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson);\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied message signature\");\n      }\n      throw err;\n    }\n  }\n  async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n    const relay = await this.initializeRelay();\n    const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n  _eth_accounts() {\n    return this._addresses;\n  }\n  _eth_coinbase() {\n    return this.selectedAddress || null;\n  }\n  _net_version() {\n    return this._chainId.toString(10);\n  }\n  _eth_chainId() {\n    return util_1.hexStringFromIntNumber(this._chainId);\n  }\n  async _eth_requestAccounts() {\n    if (this._addresses.length > 0) {\n      return Promise.resolve({\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: this._addresses\n      });\n    }\n    let res;\n    try {\n      const relay = await this.initializeRelay();\n      res = await relay.requestEthereumAccounts();\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied account authorization\");\n      }\n      throw err;\n    }\n    if (!res.result) {\n      throw new Error(\"accounts received is empty\");\n    }\n    this._setAddresses(res.result);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: this._addresses\n    };\n  }\n  _eth_sign(params) {\n    this._requireAuthorization();\n    const address = util_1.ensureAddressString(params[0]);\n    const message = util_1.ensureBuffer(params[1]);\n    return this._signEthereumMessage(message, address, false);\n  }\n  _eth_ecRecover(params) {\n    const message = util_1.ensureBuffer(params[0]);\n    const signature = util_1.ensureBuffer(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, false);\n  }\n  _personal_sign(params) {\n    this._requireAuthorization();\n    const message = util_1.ensureBuffer(params[0]);\n    const address = util_1.ensureAddressString(params[1]);\n    return this._signEthereumMessage(message, address, true);\n  }\n  _personal_ecRecover(params) {\n    const message = util_1.ensureBuffer(params[0]);\n    const signature = util_1.ensureBuffer(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, true);\n  }\n  async _eth_signTransaction(params) {\n    this._requireAuthorization();\n    const tx = this._prepareTransactionParams(params[0] || {});\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumTransaction(tx);\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n      }\n      throw err;\n    }\n  }\n  async _eth_sendRawTransaction(params) {\n    const signedTransaction = util_1.ensureBuffer(params[0]);\n    const relay = await this.initializeRelay();\n    const res = await relay.submitEthereumTransaction(signedTransaction, this._chainId);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n  async _eth_sendTransaction(params) {\n    this._requireAuthorization();\n    const tx = this._prepareTransactionParams(params[0] || {});\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signAndSubmitEthereumTransaction(tx);\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n      }\n      throw err;\n    }\n  }\n  async _eth_signTypedData_v1(params) {\n    this._requireAuthorization();\n    const typedData = util_1.ensureParsedJSONObject(params[0]);\n    const address = util_1.ensureAddressString(params[1]);\n    this._ensureKnownAddress(address);\n    const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n  async _eth_signTypedData_v3(params) {\n    this._requireAuthorization();\n    const address = util_1.ensureAddressString(params[0]);\n    const typedData = util_1.ensureParsedJSONObject(params[1]);\n    this._ensureKnownAddress(address);\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v3({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n  async _eth_signTypedData_v4(params) {\n    this._requireAuthorization();\n    const address = util_1.ensureAddressString(params[0]);\n    const typedData = util_1.ensureParsedJSONObject(params[1]);\n    this._ensureKnownAddress(address);\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v4({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n  async _walletlink_arbitrary(params) {\n    const data = params[0];\n    if (typeof data !== \"string\") {\n      throw new Error(\"parameter must be a string\");\n    }\n    const result = await this.arbitraryRequest(data);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result\n    };\n  }\n  _eth_uninstallFilter(params) {\n    const filterId = util_1.ensureHexString(params[0]);\n    return this._filterPolyfill.uninstallFilter(filterId);\n  }\n  async _eth_newFilter(params) {\n    const param = params[0];\n    const filterId = await this._filterPolyfill.newFilter(param);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n  async _eth_newBlockFilter() {\n    const filterId = await this._filterPolyfill.newBlockFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n  async _eth_newPendingTransactionFilter() {\n    const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n  _eth_getFilterChanges(params) {\n    const filterId = util_1.ensureHexString(params[0]);\n    return this._filterPolyfill.getFilterChanges(filterId);\n  }\n  _eth_getFilterLogs(params) {\n    const filterId = util_1.ensureHexString(params[0]);\n    return this._filterPolyfill.getFilterLogs(filterId);\n  }\n  initializeRelay() {\n    if (this._relay) {\n      return Promise.resolve(this._relay);\n    }\n    return this._relayProvider().then(relay => {\n      relay.setChainIdCallback(chainId => {\n        this.updateProviderInfo(this._jsonRpcUrl, parseInt(chainId, 10), true);\n      });\n      relay.setJsonRpcUrlCallback(jsonRpcUrl => {\n        this.updateProviderInfo(jsonRpcUrl, this._chainId, true);\n      });\n      this._relay = relay;\n      return relay;\n    });\n  }\n}\nexports.WalletLinkProvider = WalletLinkProvider;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","WalletLinkProvider","bn_js_1","require","util_1","eth_eip712_util_1","FilterPolyfill_1","JSONRPC_1","eth_rpc_errors_1","safe_event_emitter_1","SubscriptionManager_1","LOCAL_STORAGE_ADDRESSES_KEY","default","constructor","options","_filterPolyfill","FilterPolyfill","_subscriptionManager","SubscriptionManager","_relay","_addresses","hasMadeFirstChainChangedEmission","isChainOverridden","_send","send","_sendAsync","sendAsync","setProviderInfo","bind","updateProviderInfo","setAppInfo","enable","close","request","_setAddresses","scanQRCode","arbitraryRequest","childRequestEthereumAccounts","_chainId","ensureIntNumber","chainId","_jsonRpcUrl","jsonRpcUrl","_overrideIsMetaMask","overrideIsMetaMask","_relayProvider","relayProvider","_storage","storage","_relayEventManager","relayEventManager","chainIdStr","prepend0x","toString","emit","cachedAddresses","getItem","addresses","split","events","on","notification","type","method","data","params","length","initializeRelay","selectedAddress","undefined","networkVersion","isWalletLink","isMetaMask","host","connected","isConnected","fromRelay","originalChainId","chainChanged","appName","appLogoUrl","then","relay","JSONRPCMethod","eth_requestAccounts","resetAndReload","requestOrMethod","callbackOrParams","Array","isArray","jsonrpc","id","_sendRequestAsync","res","result","callback","requests","map","r","_sendRequest","req","Error","arrayCb","_sendMultipleRequestsAsync","responses","catch","err","cb","response","args","ethErrors","rpc","invalidRequest","message","newParams","makeRequestId","match","ensureRegExpString","childSessionId","childSessionSecret","dappName","dappLogoURL","dappURL","supportsSubscriptions","subscribe","unsubscribe","disconnect","_handleSynchronousMethods","address","ensureAddressString","setItem","join","window","dispatchEvent","CustomEvent","detail","Promise","resolve","reject","syncResult","filterPromise","_handleAsynchronousFilterMethods","assign","subscriptionPromise","_handleSubscriptionMethods","_handleAsynchronousMethods","all","eth_accounts","_eth_accounts","eth_coinbase","_eth_coinbase","eth_uninstallFilter","_eth_uninstallFilter","net_version","_net_version","eth_chainId","_eth_chainId","_eth_requestAccounts","eth_sign","_eth_sign","eth_ecRecover","_eth_ecRecover","personal_sign","_personal_sign","personal_ecRecover","_personal_ecRecover","eth_signTransaction","_eth_signTransaction","eth_sendRawTransaction","_eth_sendRawTransaction","eth_sendTransaction","_eth_sendTransaction","eth_signTypedData_v1","_eth_signTypedData_v1","eth_signTypedData_v2","_throwUnsupportedMethodError","eth_signTypedData_v3","_eth_signTypedData_v3","eth_signTypedData_v4","eth_signTypedData","_eth_signTypedData_v4","walletlink_arbitrary","_walletlink_arbitrary","fetch","body","JSON","stringify","mode","headers","json","parse","error","serializeError","eth_newFilter","_eth_newFilter","eth_newBlockFilter","_eth_newBlockFilter","eth_newPendingTransactionFilter","_eth_newPendingTransactionFilter","eth_getFilterChanges","_eth_getFilterChanges","eth_getFilterLogs","_eth_getFilterLogs","eth_subscribe","eth_unsubscribe","handleRequest","_isKnownAddress","addressString","includes","_a","_ensureKnownAddress","_prepareTransactionParams","tx","fromAddress","from","toAddress","to","weiValue","ensureBN","ensureBuffer","Buffer","alloc","nonce","gasPriceInWei","gasPrice","gasLimit","gas","_requireAuthorization","provider","unauthorized","unsupportedMethod","_signEthereumMessage","addPrefix","typedDataJson","signEthereumMessage","userRejectedRequest","_ethereumAddressFromSignedMessage","signature","ethereumAddressFromSignedMessage","hexStringFromIntNumber","requestEthereumAccounts","signEthereumTransaction","signedTransaction","submitEthereumTransaction","signAndSubmitEthereumTransaction","typedData","ensureParsedJSONObject","hashForSignTypedDataLegacy","typedDataJSON","hashForSignTypedData_v3","hashForSignTypedData_v4","filterId","ensureHexString","uninstallFilter","param","newFilter","newBlockFilter","newPendingTransactionFilter","getFilterChanges","getFilterLogs","setChainIdCallback","parseInt","setJsonRpcUrlCallback"],"sources":["/Users/radioactivedevil08/Polygon/starter-kits/node_modules/walletlink/dist/provider/WalletLinkProvider.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletLinkProvider = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst util_1 = require(\"../util\");\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\nconst JSONRPC_1 = require(\"./JSONRPC\");\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\nconst LOCAL_STORAGE_ADDRESSES_KEY = \"Addresses\";\nclass WalletLinkProvider extends safe_event_emitter_1.default {\n    constructor(options) {\n        super();\n        this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n        this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n        this._relay = null;\n        this._addresses = [];\n        this.hasMadeFirstChainChangedEmission = false;\n        // true if mobile client has sent message to override jsonRpcUrl+chainId\n        this.isChainOverridden = false;\n        this._send = this.send;\n        this._sendAsync = this.sendAsync;\n        this.setProviderInfo = this.setProviderInfo.bind(this);\n        this.updateProviderInfo = this.updateProviderInfo.bind(this);\n        this.setAppInfo = this.setAppInfo.bind(this);\n        this.enable = this.enable.bind(this);\n        this.close = this.close.bind(this);\n        this.send = this.send.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        this.request = this.request.bind(this);\n        this._setAddresses = this._setAddresses.bind(this);\n        this.scanQRCode = this.scanQRCode.bind(this);\n        this.arbitraryRequest = this.arbitraryRequest.bind(this);\n        this.childRequestEthereumAccounts = this.childRequestEthereumAccounts.bind(this);\n        this._chainId = util_1.ensureIntNumber(options.chainId || 1);\n        this._jsonRpcUrl = options.jsonRpcUrl;\n        this._overrideIsMetaMask = options.overrideIsMetaMask;\n        this._relayProvider = options.relayProvider;\n        this._storage = options.storage;\n        this._relayEventManager = options.relayEventManager;\n        const chainIdStr = util_1.prepend0x(this._chainId.toString(16));\n        // indicate that we've connected, for EIP-1193 compliance\n        this.emit(\"connect\", { chainIdStr });\n        const cachedAddresses = this._storage.getItem(LOCAL_STORAGE_ADDRESSES_KEY);\n        if (cachedAddresses) {\n            const addresses = cachedAddresses.split(\" \");\n            if (addresses[0] !== \"\") {\n                this._addresses = addresses;\n                this.emit(\"accountsChanged\", addresses);\n            }\n        }\n        this._subscriptionManager.events.on(\"notification\", (notification) => {\n            this.emit(\"message\", {\n                type: notification.method,\n                data: notification.params\n            });\n        });\n        if (this._addresses.length > 0) {\n            this.initializeRelay();\n        }\n    }\n    get selectedAddress() {\n        return this._addresses[0] || undefined;\n    }\n    get networkVersion() {\n        return this._chainId.toString(10);\n    }\n    get chainId() {\n        return util_1.prepend0x(this._chainId.toString(16));\n    }\n    get isWalletLink() {\n        return true;\n    }\n    /**\n     * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n     * true for this method.\n     */\n    get isMetaMask() {\n        return this._overrideIsMetaMask;\n    }\n    get host() {\n        return this._jsonRpcUrl;\n    }\n    get connected() {\n        return true;\n    }\n    isConnected() {\n        return true;\n    }\n    setProviderInfo(jsonRpcUrl, chainId) {\n        if (this.isChainOverridden)\n            return;\n        this.updateProviderInfo(jsonRpcUrl, chainId, false);\n    }\n    updateProviderInfo(jsonRpcUrl, chainId, fromRelay) {\n        if (fromRelay)\n            this.isChainOverridden = true;\n        const originalChainId = this._chainId;\n        this._chainId = util_1.ensureIntNumber(chainId);\n        const chainChanged = this._chainId !== originalChainId;\n        this._jsonRpcUrl = jsonRpcUrl;\n        if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n            this.emit(\"chainChanged\", this._chainId);\n            this.hasMadeFirstChainChangedEmission = true;\n        }\n    }\n    setAppInfo(appName, appLogoUrl) {\n        this.initializeRelay().then(relay => relay.setAppInfo(appName, appLogoUrl));\n    }\n    async enable() {\n        if (this._addresses.length > 0) {\n            return this._addresses;\n        }\n        return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n    }\n    close() {\n        this.initializeRelay().then(relay => relay.resetAndReload());\n    }\n    send(requestOrMethod, callbackOrParams) {\n        // send<T>(method, params): Promise<T>\n        if (typeof requestOrMethod === \"string\") {\n            const method = requestOrMethod;\n            const params = Array.isArray(callbackOrParams)\n                ? callbackOrParams\n                : callbackOrParams !== undefined\n                    ? [callbackOrParams]\n                    : [];\n            const request = {\n                jsonrpc: \"2.0\",\n                id: 0,\n                method,\n                params\n            };\n            return this._sendRequestAsync(request).then(res => res.result);\n        }\n        // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n        if (typeof callbackOrParams === \"function\") {\n            const request = requestOrMethod;\n            const callback = callbackOrParams;\n            return this._sendAsync(request, callback);\n        }\n        // send(JSONRPCRequest[]): JSONRPCResponse[]\n        if (Array.isArray(requestOrMethod)) {\n            const requests = requestOrMethod;\n            return requests.map(r => this._sendRequest(r));\n        }\n        // send(JSONRPCRequest): JSONRPCResponse\n        const req = requestOrMethod;\n        return this._sendRequest(req);\n    }\n    sendAsync(request, callback) {\n        if (typeof callback !== \"function\") {\n            throw new Error(\"callback is required\");\n        }\n        // send(JSONRPCRequest[], callback): void\n        if (Array.isArray(request)) {\n            const arrayCb = callback;\n            this._sendMultipleRequestsAsync(request)\n                .then(responses => arrayCb(null, responses))\n                .catch(err => arrayCb(err, null));\n            return;\n        }\n        // send(JSONRPCRequest, callback): void\n        const cb = callback;\n        this._sendRequestAsync(request)\n            .then(response => cb(null, response))\n            .catch(err => cb(err, null));\n    }\n    async request(args) {\n        if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"Expected a single, non-array, object argument.\",\n                data: args\n            });\n        }\n        const { method, params } = args;\n        if (typeof method !== \"string\" || method.length === 0) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"'args.method' must be a non-empty string.\",\n                data: args\n            });\n        }\n        if (params !== undefined &&\n            !Array.isArray(params) &&\n            (typeof params !== \"object\" || params === null)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"'args.params' must be an object or array if provided.\",\n                data: args\n            });\n        }\n        const newParams = params === undefined ? [] : params;\n        // WalletLink Requests\n        const id = this._relayEventManager.makeRequestId();\n        const result = await this._sendRequestAsync({\n            method,\n            params: newParams,\n            jsonrpc: \"2.0\",\n            id\n        });\n        return result.result;\n    }\n    async scanQRCode(match) {\n        const relay = await this.initializeRelay();\n        const res = await relay.scanQRCode(util_1.ensureRegExpString(match));\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    async arbitraryRequest(data) {\n        const relay = await this.initializeRelay();\n        const res = await relay.arbitraryRequest(data);\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    async childRequestEthereumAccounts(childSessionId, childSessionSecret, dappName, dappLogoURL, dappURL) {\n        const relay = await this.initializeRelay();\n        await relay.childRequestEthereumAccounts(childSessionId, childSessionSecret, dappName, dappLogoURL, dappURL);\n        return true;\n    }\n    supportsSubscriptions() {\n        return false;\n    }\n    subscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    unsubscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    disconnect() {\n        return true;\n    }\n    _sendRequest(request) {\n        const response = {\n            jsonrpc: \"2.0\",\n            id: request.id\n        };\n        const { method } = request;\n        response.result = this._handleSynchronousMethods(request);\n        if (response.result === undefined) {\n            throw new Error(`WalletLink does not support calling ${method} synchronously without ` +\n                `a callback. Please provide a callback parameter to call ${method} ` +\n                `asynchronously.`);\n        }\n        return response;\n    }\n    _setAddresses(addresses) {\n        if (!Array.isArray(addresses)) {\n            throw new Error(\"addresses is not an array\");\n        }\n        this._addresses = addresses.map(address => util_1.ensureAddressString(address));\n        this.emit(\"accountsChanged\", this._addresses);\n        this._storage.setItem(LOCAL_STORAGE_ADDRESSES_KEY, addresses.join(\" \"));\n        window.dispatchEvent(new CustomEvent(\"walletlink:addresses\", { detail: this._addresses }));\n    }\n    _sendRequestAsync(request) {\n        return new Promise((resolve, reject) => {\n            try {\n                const syncResult = this._handleSynchronousMethods(request);\n                if (syncResult !== undefined) {\n                    return resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: syncResult\n                    });\n                }\n                const filterPromise = this._handleAsynchronousFilterMethods(request);\n                if (filterPromise !== undefined) {\n                    filterPromise\n                        .then(res => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                        .catch(err => reject(err));\n                    return;\n                }\n                const subscriptionPromise = this._handleSubscriptionMethods(request);\n                if (subscriptionPromise !== undefined) {\n                    subscriptionPromise\n                        .then(res => resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: res.result\n                    }))\n                        .catch(err => reject(err));\n                    return;\n                }\n            }\n            catch (err) {\n                return reject(err);\n            }\n            this._handleAsynchronousMethods(request)\n                .then(res => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                .catch(err => reject(err));\n        });\n    }\n    _sendMultipleRequestsAsync(requests) {\n        return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n    }\n    _handleSynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_accounts:\n                return this._eth_accounts();\n            case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n                return this._eth_coinbase();\n            case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n                return this._eth_uninstallFilter(params);\n            case JSONRPC_1.JSONRPCMethod.net_version:\n                return this._net_version();\n            case JSONRPC_1.JSONRPCMethod.eth_chainId:\n                return this._eth_chainId();\n            default:\n                return undefined;\n        }\n    }\n    _handleAsynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n                return this._eth_requestAccounts();\n            case JSONRPC_1.JSONRPCMethod.eth_sign:\n                return this._eth_sign(params);\n            case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n                return this._eth_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.personal_sign:\n                return this._personal_sign(params);\n            case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n                return this._personal_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n                return this._eth_signTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n                return this._eth_sendRawTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n                return this._eth_sendTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n                return this._eth_signTypedData_v1(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n                return this._throwUnsupportedMethodError();\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n                return this._eth_signTypedData_v3(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n                return this._eth_signTypedData_v4(params);\n            case JSONRPC_1.JSONRPCMethod.walletlink_arbitrary:\n                return this._walletlink_arbitrary(params);\n        }\n        if (!this._jsonRpcUrl)\n            throw Error(\"Error: No jsonRpcUrl provided\");\n        return window\n            .fetch(this._jsonRpcUrl, {\n            method: \"POST\",\n            body: JSON.stringify(request),\n            mode: \"cors\",\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n            .then(res => res.json())\n            .then(json => {\n            if (!json) {\n                throw eth_rpc_errors_1.ethErrors.rpc.parse({});\n            }\n            const response = json;\n            const { error } = response;\n            if (error) {\n                throw eth_rpc_errors_1.serializeError(error);\n            }\n            return response;\n        });\n    }\n    _handleAsynchronousFilterMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n                return this._eth_newFilter(params);\n            case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n                return this._eth_newBlockFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n                return this._eth_newPendingTransactionFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n                return this._eth_getFilterChanges(params);\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n                return this._eth_getFilterLogs(params);\n        }\n        return undefined;\n    }\n    _handleSubscriptionMethods(request) {\n        switch (request.method) {\n            case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n            case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n                return this._subscriptionManager.handleRequest(request);\n        }\n        return undefined;\n    }\n    _isKnownAddress(addressString) {\n        try {\n            const address = util_1.ensureAddressString(addressString);\n            return this._addresses.includes(address);\n        }\n        catch (_a) { }\n        return false;\n    }\n    _ensureKnownAddress(addressString) {\n        if (!this._isKnownAddress(addressString)) {\n            throw new Error(\"Unknown Ethereum address\");\n        }\n    }\n    _prepareTransactionParams(tx) {\n        const fromAddress = tx.from\n            ? util_1.ensureAddressString(tx.from)\n            : this.selectedAddress;\n        if (!fromAddress) {\n            throw new Error(\"Ethereum address is unavailable\");\n        }\n        this._ensureKnownAddress(fromAddress);\n        const toAddress = tx.to ? util_1.ensureAddressString(tx.to) : null;\n        const weiValue = tx.value != null ? util_1.ensureBN(tx.value) : new bn_js_1.default(0);\n        const data = tx.data ? util_1.ensureBuffer(tx.data) : Buffer.alloc(0);\n        const nonce = tx.nonce != null ? util_1.ensureIntNumber(tx.nonce) : null;\n        const gasPriceInWei = tx.gasPrice != null ? util_1.ensureBN(tx.gasPrice) : null;\n        const gasLimit = tx.gas != null ? util_1.ensureBN(tx.gas) : null;\n        const chainId = this._chainId;\n        return {\n            fromAddress,\n            toAddress,\n            weiValue,\n            data,\n            nonce,\n            gasPriceInWei,\n            gasLimit,\n            chainId\n        };\n    }\n    _requireAuthorization() {\n        if (this._addresses.length === 0) {\n            throw eth_rpc_errors_1.ethErrors.provider.unauthorized({});\n        }\n    }\n    _throwUnsupportedMethodError() {\n        throw eth_rpc_errors_1.ethErrors.provider.unsupportedMethod({});\n    }\n    async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n        this._ensureKnownAddress(address);\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson);\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied message signature\");\n            }\n            throw err;\n        }\n    }\n    async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n        const relay = await this.initializeRelay();\n        const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix);\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    _eth_accounts() {\n        return this._addresses;\n    }\n    _eth_coinbase() {\n        return this.selectedAddress || null;\n    }\n    _net_version() {\n        return this._chainId.toString(10);\n    }\n    _eth_chainId() {\n        return util_1.hexStringFromIntNumber(this._chainId);\n    }\n    async _eth_requestAccounts() {\n        if (this._addresses.length > 0) {\n            return Promise.resolve({\n                jsonrpc: \"2.0\",\n                id: 0,\n                result: this._addresses\n            });\n        }\n        let res;\n        try {\n            const relay = await this.initializeRelay();\n            res = await relay.requestEthereumAccounts();\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied account authorization\");\n            }\n            throw err;\n        }\n        if (!res.result) {\n            throw new Error(\"accounts received is empty\");\n        }\n        this._setAddresses(res.result);\n        return { jsonrpc: \"2.0\", id: 0, result: this._addresses };\n    }\n    _eth_sign(params) {\n        this._requireAuthorization();\n        const address = util_1.ensureAddressString(params[0]);\n        const message = util_1.ensureBuffer(params[1]);\n        return this._signEthereumMessage(message, address, false);\n    }\n    _eth_ecRecover(params) {\n        const message = util_1.ensureBuffer(params[0]);\n        const signature = util_1.ensureBuffer(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, false);\n    }\n    _personal_sign(params) {\n        this._requireAuthorization();\n        const message = util_1.ensureBuffer(params[0]);\n        const address = util_1.ensureAddressString(params[1]);\n        return this._signEthereumMessage(message, address, true);\n    }\n    _personal_ecRecover(params) {\n        const message = util_1.ensureBuffer(params[0]);\n        const signature = util_1.ensureBuffer(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, true);\n    }\n    async _eth_signTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumTransaction(tx);\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n            }\n            throw err;\n        }\n    }\n    async _eth_sendRawTransaction(params) {\n        const signedTransaction = util_1.ensureBuffer(params[0]);\n        const relay = await this.initializeRelay();\n        const res = await relay.submitEthereumTransaction(signedTransaction, this._chainId);\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    async _eth_sendTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signAndSubmitEthereumTransaction(tx);\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n            }\n            throw err;\n        }\n    }\n    async _eth_signTypedData_v1(params) {\n        this._requireAuthorization();\n        const typedData = util_1.ensureParsedJSONObject(params[0]);\n        const address = util_1.ensureAddressString(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v3(params) {\n        this._requireAuthorization();\n        const address = util_1.ensureAddressString(params[0]);\n        const typedData = util_1.ensureParsedJSONObject(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v3({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v4(params) {\n        this._requireAuthorization();\n        const address = util_1.ensureAddressString(params[0]);\n        const typedData = util_1.ensureParsedJSONObject(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v4({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _walletlink_arbitrary(params) {\n        const data = params[0];\n        if (typeof data !== \"string\") {\n            throw new Error(\"parameter must be a string\");\n        }\n        const result = await this.arbitraryRequest(data);\n        return { jsonrpc: \"2.0\", id: 0, result };\n    }\n    _eth_uninstallFilter(params) {\n        const filterId = util_1.ensureHexString(params[0]);\n        return this._filterPolyfill.uninstallFilter(filterId);\n    }\n    async _eth_newFilter(params) {\n        const param = params[0];\n        const filterId = await this._filterPolyfill.newFilter(param);\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newBlockFilter() {\n        const filterId = await this._filterPolyfill.newBlockFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newPendingTransactionFilter() {\n        const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    _eth_getFilterChanges(params) {\n        const filterId = util_1.ensureHexString(params[0]);\n        return this._filterPolyfill.getFilterChanges(filterId);\n    }\n    _eth_getFilterLogs(params) {\n        const filterId = util_1.ensureHexString(params[0]);\n        return this._filterPolyfill.getFilterLogs(filterId);\n    }\n    initializeRelay() {\n        if (this._relay) {\n            return Promise.resolve(this._relay);\n        }\n        return this._relayProvider().then(relay => {\n            relay.setChainIdCallback((chainId) => {\n                this.updateProviderInfo(this._jsonRpcUrl, parseInt(chainId, 10), true);\n            });\n            relay.setJsonRpcUrlCallback((jsonRpcUrl) => {\n                this.updateProviderInfo(jsonRpcUrl, this._chainId, true);\n            });\n            this._relay = relay;\n            return relay;\n        });\n    }\n}\nexports.WalletLinkProvider = WalletLinkProvider;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AACnC,MAAMC,OAAO,GAAGR,eAAe,CAACS,OAAO,CAAC,OAAO,CAAC,CAAC;AACjD,MAAMC,MAAM,GAAGD,OAAO,CAAC,SAAS,CAAC;AACjC,MAAME,iBAAiB,GAAGX,eAAe,CAACS,OAAO,CAAC,8BAA8B,CAAC,CAAC;AAClF,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AACpD,MAAMI,SAAS,GAAGJ,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMK,gBAAgB,GAAGL,OAAO,CAAC,gBAAgB,CAAC;AAClD,MAAMM,oBAAoB,GAAGf,eAAe,CAACS,OAAO,CAAC,8BAA8B,CAAC,CAAC;AACrF,MAAMO,qBAAqB,GAAGP,OAAO,CAAC,uBAAuB,CAAC;AAC9D,MAAMQ,2BAA2B,GAAG,WAAW;AAC/C,MAAMV,kBAAkB,SAASQ,oBAAoB,CAACG,OAAO,CAAC;EAC1DC,WAAW,CAACC,OAAO,EAAE;IACjB,KAAK,EAAE;IACP,IAAI,CAACC,eAAe,GAAG,IAAIT,gBAAgB,CAACU,cAAc,CAAC,IAAI,CAAC;IAChE,IAAI,CAACC,oBAAoB,GAAG,IAAIP,qBAAqB,CAACQ,mBAAmB,CAAC,IAAI,CAAC;IAC/E,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,gCAAgC,GAAG,KAAK;IAC7C;IACA,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAC9B,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,IAAI;IACtB,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,SAAS;IAChC,IAAI,CAACC,eAAe,GAAG,IAAI,CAACA,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC;IACtD,IAAI,CAACC,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,CAACD,IAAI,CAAC,IAAI,CAAC;IAC5D,IAAI,CAACE,UAAU,GAAG,IAAI,CAACA,UAAU,CAACF,IAAI,CAAC,IAAI,CAAC;IAC5C,IAAI,CAACG,MAAM,GAAG,IAAI,CAACA,MAAM,CAACH,IAAI,CAAC,IAAI,CAAC;IACpC,IAAI,CAACI,KAAK,GAAG,IAAI,CAACA,KAAK,CAACJ,IAAI,CAAC,IAAI,CAAC;IAClC,IAAI,CAACJ,IAAI,GAAG,IAAI,CAACA,IAAI,CAACI,IAAI,CAAC,IAAI,CAAC;IAChC,IAAI,CAACF,SAAS,GAAG,IAAI,CAACA,SAAS,CAACE,IAAI,CAAC,IAAI,CAAC;IAC1C,IAAI,CAACK,OAAO,GAAG,IAAI,CAACA,OAAO,CAACL,IAAI,CAAC,IAAI,CAAC;IACtC,IAAI,CAACM,aAAa,GAAG,IAAI,CAACA,aAAa,CAACN,IAAI,CAAC,IAAI,CAAC;IAClD,IAAI,CAACO,UAAU,GAAG,IAAI,CAACA,UAAU,CAACP,IAAI,CAAC,IAAI,CAAC;IAC5C,IAAI,CAACQ,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACR,IAAI,CAAC,IAAI,CAAC;IACxD,IAAI,CAACS,4BAA4B,GAAG,IAAI,CAACA,4BAA4B,CAACT,IAAI,CAAC,IAAI,CAAC;IAChF,IAAI,CAACU,QAAQ,GAAGlC,MAAM,CAACmC,eAAe,CAACzB,OAAO,CAAC0B,OAAO,IAAI,CAAC,CAAC;IAC5D,IAAI,CAACC,WAAW,GAAG3B,OAAO,CAAC4B,UAAU;IACrC,IAAI,CAACC,mBAAmB,GAAG7B,OAAO,CAAC8B,kBAAkB;IACrD,IAAI,CAACC,cAAc,GAAG/B,OAAO,CAACgC,aAAa;IAC3C,IAAI,CAACC,QAAQ,GAAGjC,OAAO,CAACkC,OAAO;IAC/B,IAAI,CAACC,kBAAkB,GAAGnC,OAAO,CAACoC,iBAAiB;IACnD,MAAMC,UAAU,GAAG/C,MAAM,CAACgD,SAAS,CAAC,IAAI,CAACd,QAAQ,CAACe,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC/D;IACA,IAAI,CAACC,IAAI,CAAC,SAAS,EAAE;MAAEH;IAAW,CAAC,CAAC;IACpC,MAAMI,eAAe,GAAG,IAAI,CAACR,QAAQ,CAACS,OAAO,CAAC7C,2BAA2B,CAAC;IAC1E,IAAI4C,eAAe,EAAE;MACjB,MAAME,SAAS,GAAGF,eAAe,CAACG,KAAK,CAAC,GAAG,CAAC;MAC5C,IAAID,SAAS,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;QACrB,IAAI,CAACrC,UAAU,GAAGqC,SAAS;QAC3B,IAAI,CAACH,IAAI,CAAC,iBAAiB,EAAEG,SAAS,CAAC;MAC3C;IACJ;IACA,IAAI,CAACxC,oBAAoB,CAAC0C,MAAM,CAACC,EAAE,CAAC,cAAc,EAAGC,YAAY,IAAK;MAClE,IAAI,CAACP,IAAI,CAAC,SAAS,EAAE;QACjBQ,IAAI,EAAED,YAAY,CAACE,MAAM;QACzBC,IAAI,EAAEH,YAAY,CAACI;MACvB,CAAC,CAAC;IACN,CAAC,CAAC;IACF,IAAI,IAAI,CAAC7C,UAAU,CAAC8C,MAAM,GAAG,CAAC,EAAE;MAC5B,IAAI,CAACC,eAAe,EAAE;IAC1B;EACJ;EACA,IAAIC,eAAe,GAAG;IAClB,OAAO,IAAI,CAAChD,UAAU,CAAC,CAAC,CAAC,IAAIiD,SAAS;EAC1C;EACA,IAAIC,cAAc,GAAG;IACjB,OAAO,IAAI,CAAChC,QAAQ,CAACe,QAAQ,CAAC,EAAE,CAAC;EACrC;EACA,IAAIb,OAAO,GAAG;IACV,OAAOpC,MAAM,CAACgD,SAAS,CAAC,IAAI,CAACd,QAAQ,CAACe,QAAQ,CAAC,EAAE,CAAC,CAAC;EACvD;EACA,IAAIkB,YAAY,GAAG;IACf,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACI,IAAIC,UAAU,GAAG;IACb,OAAO,IAAI,CAAC7B,mBAAmB;EACnC;EACA,IAAI8B,IAAI,GAAG;IACP,OAAO,IAAI,CAAChC,WAAW;EAC3B;EACA,IAAIiC,SAAS,GAAG;IACZ,OAAO,IAAI;EACf;EACAC,WAAW,GAAG;IACV,OAAO,IAAI;EACf;EACAhD,eAAe,CAACe,UAAU,EAAEF,OAAO,EAAE;IACjC,IAAI,IAAI,CAAClB,iBAAiB,EACtB;IACJ,IAAI,CAACO,kBAAkB,CAACa,UAAU,EAAEF,OAAO,EAAE,KAAK,CAAC;EACvD;EACAX,kBAAkB,CAACa,UAAU,EAAEF,OAAO,EAAEoC,SAAS,EAAE;IAC/C,IAAIA,SAAS,EACT,IAAI,CAACtD,iBAAiB,GAAG,IAAI;IACjC,MAAMuD,eAAe,GAAG,IAAI,CAACvC,QAAQ;IACrC,IAAI,CAACA,QAAQ,GAAGlC,MAAM,CAACmC,eAAe,CAACC,OAAO,CAAC;IAC/C,MAAMsC,YAAY,GAAG,IAAI,CAACxC,QAAQ,KAAKuC,eAAe;IACtD,IAAI,CAACpC,WAAW,GAAGC,UAAU;IAC7B,IAAIoC,YAAY,IAAI,CAAC,IAAI,CAACzD,gCAAgC,EAAE;MACxD,IAAI,CAACiC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAChB,QAAQ,CAAC;MACxC,IAAI,CAACjB,gCAAgC,GAAG,IAAI;IAChD;EACJ;EACAS,UAAU,CAACiD,OAAO,EAAEC,UAAU,EAAE;IAC5B,IAAI,CAACb,eAAe,EAAE,CAACc,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACpD,UAAU,CAACiD,OAAO,EAAEC,UAAU,CAAC,CAAC;EAC/E;EACA,MAAMjD,MAAM,GAAG;IACX,IAAI,IAAI,CAACX,UAAU,CAAC8C,MAAM,GAAG,CAAC,EAAE;MAC5B,OAAO,IAAI,CAAC9C,UAAU;IAC1B;IACA,OAAO,MAAM,IAAI,CAACG,KAAK,CAAChB,SAAS,CAAC4E,aAAa,CAACC,mBAAmB,CAAC;EACxE;EACApD,KAAK,GAAG;IACJ,IAAI,CAACmC,eAAe,EAAE,CAACc,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACG,cAAc,EAAE,CAAC;EAChE;EACA7D,IAAI,CAAC8D,eAAe,EAAEC,gBAAgB,EAAE;IACpC;IACA,IAAI,OAAOD,eAAe,KAAK,QAAQ,EAAE;MACrC,MAAMvB,MAAM,GAAGuB,eAAe;MAC9B,MAAMrB,MAAM,GAAGuB,KAAK,CAACC,OAAO,CAACF,gBAAgB,CAAC,GACxCA,gBAAgB,GAChBA,gBAAgB,KAAKlB,SAAS,GAC1B,CAACkB,gBAAgB,CAAC,GAClB,EAAE;MACZ,MAAMtD,OAAO,GAAG;QACZyD,OAAO,EAAE,KAAK;QACdC,EAAE,EAAE,CAAC;QACL5B,MAAM;QACNE;MACJ,CAAC;MACD,OAAO,IAAI,CAAC2B,iBAAiB,CAAC3D,OAAO,CAAC,CAACgD,IAAI,CAACY,GAAG,IAAIA,GAAG,CAACC,MAAM,CAAC;IAClE;IACA;IACA,IAAI,OAAOP,gBAAgB,KAAK,UAAU,EAAE;MACxC,MAAMtD,OAAO,GAAGqD,eAAe;MAC/B,MAAMS,QAAQ,GAAGR,gBAAgB;MACjC,OAAO,IAAI,CAAC9D,UAAU,CAACQ,OAAO,EAAE8D,QAAQ,CAAC;IAC7C;IACA;IACA,IAAIP,KAAK,CAACC,OAAO,CAACH,eAAe,CAAC,EAAE;MAChC,MAAMU,QAAQ,GAAGV,eAAe;MAChC,OAAOU,QAAQ,CAACC,GAAG,CAACC,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC;IAClD;IACA;IACA,MAAME,GAAG,GAAGd,eAAe;IAC3B,OAAO,IAAI,CAACa,YAAY,CAACC,GAAG,CAAC;EACjC;EACA1E,SAAS,CAACO,OAAO,EAAE8D,QAAQ,EAAE;IACzB,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;MAChC,MAAM,IAAIM,KAAK,CAAC,sBAAsB,CAAC;IAC3C;IACA;IACA,IAAIb,KAAK,CAACC,OAAO,CAACxD,OAAO,CAAC,EAAE;MACxB,MAAMqE,OAAO,GAAGP,QAAQ;MACxB,IAAI,CAACQ,0BAA0B,CAACtE,OAAO,CAAC,CACnCgD,IAAI,CAACuB,SAAS,IAAIF,OAAO,CAAC,IAAI,EAAEE,SAAS,CAAC,CAAC,CAC3CC,KAAK,CAACC,GAAG,IAAIJ,OAAO,CAACI,GAAG,EAAE,IAAI,CAAC,CAAC;MACrC;IACJ;IACA;IACA,MAAMC,EAAE,GAAGZ,QAAQ;IACnB,IAAI,CAACH,iBAAiB,CAAC3D,OAAO,CAAC,CAC1BgD,IAAI,CAAC2B,QAAQ,IAAID,EAAE,CAAC,IAAI,EAAEC,QAAQ,CAAC,CAAC,CACpCH,KAAK,CAACC,GAAG,IAAIC,EAAE,CAACD,GAAG,EAAE,IAAI,CAAC,CAAC;EACpC;EACA,MAAMzE,OAAO,CAAC4E,IAAI,EAAE;IAChB,IAAI,CAACA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIrB,KAAK,CAACC,OAAO,CAACoB,IAAI,CAAC,EAAE;MAC1D,MAAMrG,gBAAgB,CAACsG,SAAS,CAACC,GAAG,CAACC,cAAc,CAAC;QAChDC,OAAO,EAAE,gDAAgD;QACzDjD,IAAI,EAAE6C;MACV,CAAC,CAAC;IACN;IACA,MAAM;MAAE9C,MAAM;MAAEE;IAAO,CAAC,GAAG4C,IAAI;IAC/B,IAAI,OAAO9C,MAAM,KAAK,QAAQ,IAAIA,MAAM,CAACG,MAAM,KAAK,CAAC,EAAE;MACnD,MAAM1D,gBAAgB,CAACsG,SAAS,CAACC,GAAG,CAACC,cAAc,CAAC;QAChDC,OAAO,EAAE,2CAA2C;QACpDjD,IAAI,EAAE6C;MACV,CAAC,CAAC;IACN;IACA,IAAI5C,MAAM,KAAKI,SAAS,IACpB,CAACmB,KAAK,CAACC,OAAO,CAACxB,MAAM,CAAC,KACrB,OAAOA,MAAM,KAAK,QAAQ,IAAIA,MAAM,KAAK,IAAI,CAAC,EAAE;MACjD,MAAMzD,gBAAgB,CAACsG,SAAS,CAACC,GAAG,CAACC,cAAc,CAAC;QAChDC,OAAO,EAAE,uDAAuD;QAChEjD,IAAI,EAAE6C;MACV,CAAC,CAAC;IACN;IACA,MAAMK,SAAS,GAAGjD,MAAM,KAAKI,SAAS,GAAG,EAAE,GAAGJ,MAAM;IACpD;IACA,MAAM0B,EAAE,GAAG,IAAI,CAAC1C,kBAAkB,CAACkE,aAAa,EAAE;IAClD,MAAMrB,MAAM,GAAG,MAAM,IAAI,CAACF,iBAAiB,CAAC;MACxC7B,MAAM;MACNE,MAAM,EAAEiD,SAAS;MACjBxB,OAAO,EAAE,KAAK;MACdC;IACJ,CAAC,CAAC;IACF,OAAOG,MAAM,CAACA,MAAM;EACxB;EACA,MAAM3D,UAAU,CAACiF,KAAK,EAAE;IACpB,MAAMlC,KAAK,GAAG,MAAM,IAAI,CAACf,eAAe,EAAE;IAC1C,MAAM0B,GAAG,GAAG,MAAMX,KAAK,CAAC/C,UAAU,CAAC/B,MAAM,CAACiH,kBAAkB,CAACD,KAAK,CAAC,CAAC;IACpE,IAAI,OAAOvB,GAAG,CAACC,MAAM,KAAK,QAAQ,EAAE;MAChC,MAAM,IAAIO,KAAK,CAAC,yBAAyB,CAAC;IAC9C;IACA,OAAOR,GAAG,CAACC,MAAM;EACrB;EACA,MAAM1D,gBAAgB,CAAC4B,IAAI,EAAE;IACzB,MAAMkB,KAAK,GAAG,MAAM,IAAI,CAACf,eAAe,EAAE;IAC1C,MAAM0B,GAAG,GAAG,MAAMX,KAAK,CAAC9C,gBAAgB,CAAC4B,IAAI,CAAC;IAC9C,IAAI,OAAO6B,GAAG,CAACC,MAAM,KAAK,QAAQ,EAAE;MAChC,MAAM,IAAIO,KAAK,CAAC,yBAAyB,CAAC;IAC9C;IACA,OAAOR,GAAG,CAACC,MAAM;EACrB;EACA,MAAMzD,4BAA4B,CAACiF,cAAc,EAAEC,kBAAkB,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,OAAO,EAAE;IACnG,MAAMxC,KAAK,GAAG,MAAM,IAAI,CAACf,eAAe,EAAE;IAC1C,MAAMe,KAAK,CAAC7C,4BAA4B,CAACiF,cAAc,EAAEC,kBAAkB,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,OAAO,CAAC;IAC5G,OAAO,IAAI;EACf;EACAC,qBAAqB,GAAG;IACpB,OAAO,KAAK;EAChB;EACAC,SAAS,GAAG;IACR,MAAM,IAAIvB,KAAK,CAAC,iCAAiC,CAAC;EACtD;EACAwB,WAAW,GAAG;IACV,MAAM,IAAIxB,KAAK,CAAC,iCAAiC,CAAC;EACtD;EACAyB,UAAU,GAAG;IACT,OAAO,IAAI;EACf;EACA3B,YAAY,CAAClE,OAAO,EAAE;IAClB,MAAM2E,QAAQ,GAAG;MACblB,OAAO,EAAE,KAAK;MACdC,EAAE,EAAE1D,OAAO,CAAC0D;IAChB,CAAC;IACD,MAAM;MAAE5B;IAAO,CAAC,GAAG9B,OAAO;IAC1B2E,QAAQ,CAACd,MAAM,GAAG,IAAI,CAACiC,yBAAyB,CAAC9F,OAAO,CAAC;IACzD,IAAI2E,QAAQ,CAACd,MAAM,KAAKzB,SAAS,EAAE;MAC/B,MAAM,IAAIgC,KAAK,CAAE,uCAAsCtC,MAAO,yBAAwB,GACjF,2DAA0DA,MAAO,GAAE,GACnE,iBAAgB,CAAC;IAC1B;IACA,OAAO6C,QAAQ;EACnB;EACA1E,aAAa,CAACuB,SAAS,EAAE;IACrB,IAAI,CAAC+B,KAAK,CAACC,OAAO,CAAChC,SAAS,CAAC,EAAE;MAC3B,MAAM,IAAI4C,KAAK,CAAC,2BAA2B,CAAC;IAChD;IACA,IAAI,CAACjF,UAAU,GAAGqC,SAAS,CAACwC,GAAG,CAAC+B,OAAO,IAAI5H,MAAM,CAAC6H,mBAAmB,CAACD,OAAO,CAAC,CAAC;IAC/E,IAAI,CAAC1E,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAClC,UAAU,CAAC;IAC7C,IAAI,CAAC2B,QAAQ,CAACmF,OAAO,CAACvH,2BAA2B,EAAE8C,SAAS,CAAC0E,IAAI,CAAC,GAAG,CAAC,CAAC;IACvEC,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,sBAAsB,EAAE;MAAEC,MAAM,EAAE,IAAI,CAACnH;IAAW,CAAC,CAAC,CAAC;EAC9F;EACAwE,iBAAiB,CAAC3D,OAAO,EAAE;IACvB,OAAO,IAAIuG,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpC,IAAI;QACA,MAAMC,UAAU,GAAG,IAAI,CAACZ,yBAAyB,CAAC9F,OAAO,CAAC;QAC1D,IAAI0G,UAAU,KAAKtE,SAAS,EAAE;UAC1B,OAAOoE,OAAO,CAAC;YACX/C,OAAO,EAAE,KAAK;YACdC,EAAE,EAAE1D,OAAO,CAAC0D,EAAE;YACdG,MAAM,EAAE6C;UACZ,CAAC,CAAC;QACN;QACA,MAAMC,aAAa,GAAG,IAAI,CAACC,gCAAgC,CAAC5G,OAAO,CAAC;QACpE,IAAI2G,aAAa,KAAKvE,SAAS,EAAE;UAC7BuE,aAAa,CACR3D,IAAI,CAACY,GAAG,IAAI4C,OAAO,CAAC5I,MAAM,CAACiJ,MAAM,CAACjJ,MAAM,CAACiJ,MAAM,CAAC,CAAC,CAAC,EAAEjD,GAAG,CAAC,EAAE;YAAEF,EAAE,EAAE1D,OAAO,CAAC0D;UAAG,CAAC,CAAC,CAAC,CAAC,CAC/Ec,KAAK,CAACC,GAAG,IAAIgC,MAAM,CAAChC,GAAG,CAAC,CAAC;UAC9B;QACJ;QACA,MAAMqC,mBAAmB,GAAG,IAAI,CAACC,0BAA0B,CAAC/G,OAAO,CAAC;QACpE,IAAI8G,mBAAmB,KAAK1E,SAAS,EAAE;UACnC0E,mBAAmB,CACd9D,IAAI,CAACY,GAAG,IAAI4C,OAAO,CAAC;YACrB/C,OAAO,EAAE,KAAK;YACdC,EAAE,EAAE1D,OAAO,CAAC0D,EAAE;YACdG,MAAM,EAAED,GAAG,CAACC;UAChB,CAAC,CAAC,CAAC,CACEW,KAAK,CAACC,GAAG,IAAIgC,MAAM,CAAChC,GAAG,CAAC,CAAC;UAC9B;QACJ;MACJ,CAAC,CACD,OAAOA,GAAG,EAAE;QACR,OAAOgC,MAAM,CAAChC,GAAG,CAAC;MACtB;MACA,IAAI,CAACuC,0BAA0B,CAAChH,OAAO,CAAC,CACnCgD,IAAI,CAACY,GAAG,IAAI4C,OAAO,CAAC5I,MAAM,CAACiJ,MAAM,CAACjJ,MAAM,CAACiJ,MAAM,CAAC,CAAC,CAAC,EAAEjD,GAAG,CAAC,EAAE;QAAEF,EAAE,EAAE1D,OAAO,CAAC0D;MAAG,CAAC,CAAC,CAAC,CAAC,CAC/Ec,KAAK,CAACC,GAAG,IAAIgC,MAAM,CAAChC,GAAG,CAAC,CAAC;IAClC,CAAC,CAAC;EACN;EACAH,0BAA0B,CAACP,QAAQ,EAAE;IACjC,OAAOwC,OAAO,CAACU,GAAG,CAAClD,QAAQ,CAACC,GAAG,CAACC,CAAC,IAAI,IAAI,CAACN,iBAAiB,CAACM,CAAC,CAAC,CAAC,CAAC;EACpE;EACA6B,yBAAyB,CAAC9F,OAAO,EAAE;IAC/B,MAAM;MAAE8B;IAAO,CAAC,GAAG9B,OAAO;IAC1B,MAAMgC,MAAM,GAAGhC,OAAO,CAACgC,MAAM,IAAI,EAAE;IACnC,QAAQF,MAAM;MACV,KAAKxD,SAAS,CAAC4E,aAAa,CAACgE,YAAY;QACrC,OAAO,IAAI,CAACC,aAAa,EAAE;MAC/B,KAAK7I,SAAS,CAAC4E,aAAa,CAACkE,YAAY;QACrC,OAAO,IAAI,CAACC,aAAa,EAAE;MAC/B,KAAK/I,SAAS,CAAC4E,aAAa,CAACoE,mBAAmB;QAC5C,OAAO,IAAI,CAACC,oBAAoB,CAACvF,MAAM,CAAC;MAC5C,KAAK1D,SAAS,CAAC4E,aAAa,CAACsE,WAAW;QACpC,OAAO,IAAI,CAACC,YAAY,EAAE;MAC9B,KAAKnJ,SAAS,CAAC4E,aAAa,CAACwE,WAAW;QACpC,OAAO,IAAI,CAACC,YAAY,EAAE;MAC9B;QACI,OAAOvF,SAAS;IAAC;EAE7B;EACA4E,0BAA0B,CAAChH,OAAO,EAAE;IAChC,MAAM;MAAE8B;IAAO,CAAC,GAAG9B,OAAO;IAC1B,MAAMgC,MAAM,GAAGhC,OAAO,CAACgC,MAAM,IAAI,EAAE;IACnC,QAAQF,MAAM;MACV,KAAKxD,SAAS,CAAC4E,aAAa,CAACC,mBAAmB;QAC5C,OAAO,IAAI,CAACyE,oBAAoB,EAAE;MACtC,KAAKtJ,SAAS,CAAC4E,aAAa,CAAC2E,QAAQ;QACjC,OAAO,IAAI,CAACC,SAAS,CAAC9F,MAAM,CAAC;MACjC,KAAK1D,SAAS,CAAC4E,aAAa,CAAC6E,aAAa;QACtC,OAAO,IAAI,CAACC,cAAc,CAAChG,MAAM,CAAC;MACtC,KAAK1D,SAAS,CAAC4E,aAAa,CAAC+E,aAAa;QACtC,OAAO,IAAI,CAACC,cAAc,CAAClG,MAAM,CAAC;MACtC,KAAK1D,SAAS,CAAC4E,aAAa,CAACiF,kBAAkB;QAC3C,OAAO,IAAI,CAACC,mBAAmB,CAACpG,MAAM,CAAC;MAC3C,KAAK1D,SAAS,CAAC4E,aAAa,CAACmF,mBAAmB;QAC5C,OAAO,IAAI,CAACC,oBAAoB,CAACtG,MAAM,CAAC;MAC5C,KAAK1D,SAAS,CAAC4E,aAAa,CAACqF,sBAAsB;QAC/C,OAAO,IAAI,CAACC,uBAAuB,CAACxG,MAAM,CAAC;MAC/C,KAAK1D,SAAS,CAAC4E,aAAa,CAACuF,mBAAmB;QAC5C,OAAO,IAAI,CAACC,oBAAoB,CAAC1G,MAAM,CAAC;MAC5C,KAAK1D,SAAS,CAAC4E,aAAa,CAACyF,oBAAoB;QAC7C,OAAO,IAAI,CAACC,qBAAqB,CAAC5G,MAAM,CAAC;MAC7C,KAAK1D,SAAS,CAAC4E,aAAa,CAAC2F,oBAAoB;QAC7C,OAAO,IAAI,CAACC,4BAA4B,EAAE;MAC9C,KAAKxK,SAAS,CAAC4E,aAAa,CAAC6F,oBAAoB;QAC7C,OAAO,IAAI,CAACC,qBAAqB,CAAChH,MAAM,CAAC;MAC7C,KAAK1D,SAAS,CAAC4E,aAAa,CAAC+F,oBAAoB;MACjD,KAAK3K,SAAS,CAAC4E,aAAa,CAACgG,iBAAiB;QAC1C,OAAO,IAAI,CAACC,qBAAqB,CAACnH,MAAM,CAAC;MAC7C,KAAK1D,SAAS,CAAC4E,aAAa,CAACkG,oBAAoB;QAC7C,OAAO,IAAI,CAACC,qBAAqB,CAACrH,MAAM,CAAC;IAAC;IAElD,IAAI,CAAC,IAAI,CAACxB,WAAW,EACjB,MAAM4D,KAAK,CAAC,+BAA+B,CAAC;IAChD,OAAO+B,MAAM,CACRmD,KAAK,CAAC,IAAI,CAAC9I,WAAW,EAAE;MACzBsB,MAAM,EAAE,MAAM;MACdyH,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACzJ,OAAO,CAAC;MAC7B0J,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAClD,CAAC,CAAC,CACG3G,IAAI,CAACY,GAAG,IAAIA,GAAG,CAACgG,IAAI,EAAE,CAAC,CACvB5G,IAAI,CAAC4G,IAAI,IAAI;MACd,IAAI,CAACA,IAAI,EAAE;QACP,MAAMrL,gBAAgB,CAACsG,SAAS,CAACC,GAAG,CAAC+E,KAAK,CAAC,CAAC,CAAC,CAAC;MAClD;MACA,MAAMlF,QAAQ,GAAGiF,IAAI;MACrB,MAAM;QAAEE;MAAM,CAAC,GAAGnF,QAAQ;MAC1B,IAAImF,KAAK,EAAE;QACP,MAAMvL,gBAAgB,CAACwL,cAAc,CAACD,KAAK,CAAC;MAChD;MACA,OAAOnF,QAAQ;IACnB,CAAC,CAAC;EACN;EACAiC,gCAAgC,CAAC5G,OAAO,EAAE;IACtC,MAAM;MAAE8B;IAAO,CAAC,GAAG9B,OAAO;IAC1B,MAAMgC,MAAM,GAAGhC,OAAO,CAACgC,MAAM,IAAI,EAAE;IACnC,QAAQF,MAAM;MACV,KAAKxD,SAAS,CAAC4E,aAAa,CAAC8G,aAAa;QACtC,OAAO,IAAI,CAACC,cAAc,CAACjI,MAAM,CAAC;MACtC,KAAK1D,SAAS,CAAC4E,aAAa,CAACgH,kBAAkB;QAC3C,OAAO,IAAI,CAACC,mBAAmB,EAAE;MACrC,KAAK7L,SAAS,CAAC4E,aAAa,CAACkH,+BAA+B;QACxD,OAAO,IAAI,CAACC,gCAAgC,EAAE;MAClD,KAAK/L,SAAS,CAAC4E,aAAa,CAACoH,oBAAoB;QAC7C,OAAO,IAAI,CAACC,qBAAqB,CAACvI,MAAM,CAAC;MAC7C,KAAK1D,SAAS,CAAC4E,aAAa,CAACsH,iBAAiB;QAC1C,OAAO,IAAI,CAACC,kBAAkB,CAACzI,MAAM,CAAC;IAAC;IAE/C,OAAOI,SAAS;EACpB;EACA2E,0BAA0B,CAAC/G,OAAO,EAAE;IAChC,QAAQA,OAAO,CAAC8B,MAAM;MAClB,KAAKxD,SAAS,CAAC4E,aAAa,CAACwH,aAAa;MAC1C,KAAKpM,SAAS,CAAC4E,aAAa,CAACyH,eAAe;QACxC,OAAO,IAAI,CAAC3L,oBAAoB,CAAC4L,aAAa,CAAC5K,OAAO,CAAC;IAAC;IAEhE,OAAOoC,SAAS;EACpB;EACAyI,eAAe,CAACC,aAAa,EAAE;IAC3B,IAAI;MACA,MAAM/E,OAAO,GAAG5H,MAAM,CAAC6H,mBAAmB,CAAC8E,aAAa,CAAC;MACzD,OAAO,IAAI,CAAC3L,UAAU,CAAC4L,QAAQ,CAAChF,OAAO,CAAC;IAC5C,CAAC,CACD,OAAOiF,EAAE,EAAE,CAAE;IACb,OAAO,KAAK;EAChB;EACAC,mBAAmB,CAACH,aAAa,EAAE;IAC/B,IAAI,CAAC,IAAI,CAACD,eAAe,CAACC,aAAa,CAAC,EAAE;MACtC,MAAM,IAAI1G,KAAK,CAAC,0BAA0B,CAAC;IAC/C;EACJ;EACA8G,yBAAyB,CAACC,EAAE,EAAE;IAC1B,MAAMC,WAAW,GAAGD,EAAE,CAACE,IAAI,GACrBlN,MAAM,CAAC6H,mBAAmB,CAACmF,EAAE,CAACE,IAAI,CAAC,GACnC,IAAI,CAAClJ,eAAe;IAC1B,IAAI,CAACiJ,WAAW,EAAE;MACd,MAAM,IAAIhH,KAAK,CAAC,iCAAiC,CAAC;IACtD;IACA,IAAI,CAAC6G,mBAAmB,CAACG,WAAW,CAAC;IACrC,MAAME,SAAS,GAAGH,EAAE,CAACI,EAAE,GAAGpN,MAAM,CAAC6H,mBAAmB,CAACmF,EAAE,CAACI,EAAE,CAAC,GAAG,IAAI;IAClE,MAAMC,QAAQ,GAAGL,EAAE,CAACpN,KAAK,IAAI,IAAI,GAAGI,MAAM,CAACsN,QAAQ,CAACN,EAAE,CAACpN,KAAK,CAAC,GAAG,IAAIE,OAAO,CAACU,OAAO,CAAC,CAAC,CAAC;IACtF,MAAMoD,IAAI,GAAGoJ,EAAE,CAACpJ,IAAI,GAAG5D,MAAM,CAACuN,YAAY,CAACP,EAAE,CAACpJ,IAAI,CAAC,GAAG4J,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACrE,MAAMC,KAAK,GAAGV,EAAE,CAACU,KAAK,IAAI,IAAI,GAAG1N,MAAM,CAACmC,eAAe,CAAC6K,EAAE,CAACU,KAAK,CAAC,GAAG,IAAI;IACxE,MAAMC,aAAa,GAAGX,EAAE,CAACY,QAAQ,IAAI,IAAI,GAAG5N,MAAM,CAACsN,QAAQ,CAACN,EAAE,CAACY,QAAQ,CAAC,GAAG,IAAI;IAC/E,MAAMC,QAAQ,GAAGb,EAAE,CAACc,GAAG,IAAI,IAAI,GAAG9N,MAAM,CAACsN,QAAQ,CAACN,EAAE,CAACc,GAAG,CAAC,GAAG,IAAI;IAChE,MAAM1L,OAAO,GAAG,IAAI,CAACF,QAAQ;IAC7B,OAAO;MACH+K,WAAW;MACXE,SAAS;MACTE,QAAQ;MACRzJ,IAAI;MACJ8J,KAAK;MACLC,aAAa;MACbE,QAAQ;MACRzL;IACJ,CAAC;EACL;EACA2L,qBAAqB,GAAG;IACpB,IAAI,IAAI,CAAC/M,UAAU,CAAC8C,MAAM,KAAK,CAAC,EAAE;MAC9B,MAAM1D,gBAAgB,CAACsG,SAAS,CAACsH,QAAQ,CAACC,YAAY,CAAC,CAAC,CAAC,CAAC;IAC9D;EACJ;EACAtD,4BAA4B,GAAG;IAC3B,MAAMvK,gBAAgB,CAACsG,SAAS,CAACsH,QAAQ,CAACE,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACnE;EACA,MAAMC,oBAAoB,CAACtH,OAAO,EAAEe,OAAO,EAAEwG,SAAS,EAAEC,aAAa,EAAE;IACnE,IAAI,CAACvB,mBAAmB,CAAClF,OAAO,CAAC;IACjC,IAAI;MACA,MAAM9C,KAAK,GAAG,MAAM,IAAI,CAACf,eAAe,EAAE;MAC1C,MAAM0B,GAAG,GAAG,MAAMX,KAAK,CAACwJ,mBAAmB,CAACzH,OAAO,EAAEe,OAAO,EAAEwG,SAAS,EAAEC,aAAa,CAAC;MACvF,OAAO;QAAE/I,OAAO,EAAE,KAAK;QAAEC,EAAE,EAAE,CAAC;QAAEG,MAAM,EAAED,GAAG,CAACC;MAAO,CAAC;IACxD,CAAC,CACD,OAAOY,GAAG,EAAE;MACR,IAAI,OAAOA,GAAG,CAACO,OAAO,KAAK,QAAQ,IAC/BP,GAAG,CAACO,OAAO,CAACG,KAAK,CAAC,oBAAoB,CAAC,EAAE;QACzC,MAAM5G,gBAAgB,CAACsG,SAAS,CAACsH,QAAQ,CAACO,mBAAmB,CAAC,+BAA+B,CAAC;MAClG;MACA,MAAMjI,GAAG;IACb;EACJ;EACA,MAAMkI,iCAAiC,CAAC3H,OAAO,EAAE4H,SAAS,EAAEL,SAAS,EAAE;IACnE,MAAMtJ,KAAK,GAAG,MAAM,IAAI,CAACf,eAAe,EAAE;IAC1C,MAAM0B,GAAG,GAAG,MAAMX,KAAK,CAAC4J,gCAAgC,CAAC7H,OAAO,EAAE4H,SAAS,EAAEL,SAAS,CAAC;IACvF,OAAO;MAAE9I,OAAO,EAAE,KAAK;MAAEC,EAAE,EAAE,CAAC;MAAEG,MAAM,EAAED,GAAG,CAACC;IAAO,CAAC;EACxD;EACAsD,aAAa,GAAG;IACZ,OAAO,IAAI,CAAChI,UAAU;EAC1B;EACAkI,aAAa,GAAG;IACZ,OAAO,IAAI,CAAClF,eAAe,IAAI,IAAI;EACvC;EACAsF,YAAY,GAAG;IACX,OAAO,IAAI,CAACpH,QAAQ,CAACe,QAAQ,CAAC,EAAE,CAAC;EACrC;EACAuG,YAAY,GAAG;IACX,OAAOxJ,MAAM,CAAC2O,sBAAsB,CAAC,IAAI,CAACzM,QAAQ,CAAC;EACvD;EACA,MAAMuH,oBAAoB,GAAG;IACzB,IAAI,IAAI,CAACzI,UAAU,CAAC8C,MAAM,GAAG,CAAC,EAAE;MAC5B,OAAOsE,OAAO,CAACC,OAAO,CAAC;QACnB/C,OAAO,EAAE,KAAK;QACdC,EAAE,EAAE,CAAC;QACLG,MAAM,EAAE,IAAI,CAAC1E;MACjB,CAAC,CAAC;IACN;IACA,IAAIyE,GAAG;IACP,IAAI;MACA,MAAMX,KAAK,GAAG,MAAM,IAAI,CAACf,eAAe,EAAE;MAC1C0B,GAAG,GAAG,MAAMX,KAAK,CAAC8J,uBAAuB,EAAE;IAC/C,CAAC,CACD,OAAOtI,GAAG,EAAE;MACR,IAAI,OAAOA,GAAG,CAACO,OAAO,KAAK,QAAQ,IAC/BP,GAAG,CAACO,OAAO,CAACG,KAAK,CAAC,oBAAoB,CAAC,EAAE;QACzC,MAAM5G,gBAAgB,CAACsG,SAAS,CAACsH,QAAQ,CAACO,mBAAmB,CAAC,mCAAmC,CAAC;MACtG;MACA,MAAMjI,GAAG;IACb;IACA,IAAI,CAACb,GAAG,CAACC,MAAM,EAAE;MACb,MAAM,IAAIO,KAAK,CAAC,4BAA4B,CAAC;IACjD;IACA,IAAI,CAACnE,aAAa,CAAC2D,GAAG,CAACC,MAAM,CAAC;IAC9B,OAAO;MAAEJ,OAAO,EAAE,KAAK;MAAEC,EAAE,EAAE,CAAC;MAAEG,MAAM,EAAE,IAAI,CAAC1E;IAAW,CAAC;EAC7D;EACA2I,SAAS,CAAC9F,MAAM,EAAE;IACd,IAAI,CAACkK,qBAAqB,EAAE;IAC5B,MAAMnG,OAAO,GAAG5H,MAAM,CAAC6H,mBAAmB,CAAChE,MAAM,CAAC,CAAC,CAAC,CAAC;IACrD,MAAMgD,OAAO,GAAG7G,MAAM,CAACuN,YAAY,CAAC1J,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9C,OAAO,IAAI,CAACsK,oBAAoB,CAACtH,OAAO,EAAEe,OAAO,EAAE,KAAK,CAAC;EAC7D;EACAiC,cAAc,CAAChG,MAAM,EAAE;IACnB,MAAMgD,OAAO,GAAG7G,MAAM,CAACuN,YAAY,CAAC1J,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9C,MAAM4K,SAAS,GAAGzO,MAAM,CAACuN,YAAY,CAAC1J,MAAM,CAAC,CAAC,CAAC,CAAC;IAChD,OAAO,IAAI,CAAC2K,iCAAiC,CAAC3H,OAAO,EAAE4H,SAAS,EAAE,KAAK,CAAC;EAC5E;EACA1E,cAAc,CAAClG,MAAM,EAAE;IACnB,IAAI,CAACkK,qBAAqB,EAAE;IAC5B,MAAMlH,OAAO,GAAG7G,MAAM,CAACuN,YAAY,CAAC1J,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9C,MAAM+D,OAAO,GAAG5H,MAAM,CAAC6H,mBAAmB,CAAChE,MAAM,CAAC,CAAC,CAAC,CAAC;IACrD,OAAO,IAAI,CAACsK,oBAAoB,CAACtH,OAAO,EAAEe,OAAO,EAAE,IAAI,CAAC;EAC5D;EACAqC,mBAAmB,CAACpG,MAAM,EAAE;IACxB,MAAMgD,OAAO,GAAG7G,MAAM,CAACuN,YAAY,CAAC1J,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9C,MAAM4K,SAAS,GAAGzO,MAAM,CAACuN,YAAY,CAAC1J,MAAM,CAAC,CAAC,CAAC,CAAC;IAChD,OAAO,IAAI,CAAC2K,iCAAiC,CAAC3H,OAAO,EAAE4H,SAAS,EAAE,IAAI,CAAC;EAC3E;EACA,MAAMtE,oBAAoB,CAACtG,MAAM,EAAE;IAC/B,IAAI,CAACkK,qBAAqB,EAAE;IAC5B,MAAMf,EAAE,GAAG,IAAI,CAACD,yBAAyB,CAAClJ,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1D,IAAI;MACA,MAAMiB,KAAK,GAAG,MAAM,IAAI,CAACf,eAAe,EAAE;MAC1C,MAAM0B,GAAG,GAAG,MAAMX,KAAK,CAAC+J,uBAAuB,CAAC7B,EAAE,CAAC;MACnD,OAAO;QAAE1H,OAAO,EAAE,KAAK;QAAEC,EAAE,EAAE,CAAC;QAAEG,MAAM,EAAED,GAAG,CAACC;MAAO,CAAC;IACxD,CAAC,CACD,OAAOY,GAAG,EAAE;MACR,IAAI,OAAOA,GAAG,CAACO,OAAO,KAAK,QAAQ,IAC/BP,GAAG,CAACO,OAAO,CAACG,KAAK,CAAC,oBAAoB,CAAC,EAAE;QACzC,MAAM5G,gBAAgB,CAACsG,SAAS,CAACsH,QAAQ,CAACO,mBAAmB,CAAC,mCAAmC,CAAC;MACtG;MACA,MAAMjI,GAAG;IACb;EACJ;EACA,MAAM+D,uBAAuB,CAACxG,MAAM,EAAE;IAClC,MAAMiL,iBAAiB,GAAG9O,MAAM,CAACuN,YAAY,CAAC1J,MAAM,CAAC,CAAC,CAAC,CAAC;IACxD,MAAMiB,KAAK,GAAG,MAAM,IAAI,CAACf,eAAe,EAAE;IAC1C,MAAM0B,GAAG,GAAG,MAAMX,KAAK,CAACiK,yBAAyB,CAACD,iBAAiB,EAAE,IAAI,CAAC5M,QAAQ,CAAC;IACnF,OAAO;MAAEoD,OAAO,EAAE,KAAK;MAAEC,EAAE,EAAE,CAAC;MAAEG,MAAM,EAAED,GAAG,CAACC;IAAO,CAAC;EACxD;EACA,MAAM6E,oBAAoB,CAAC1G,MAAM,EAAE;IAC/B,IAAI,CAACkK,qBAAqB,EAAE;IAC5B,MAAMf,EAAE,GAAG,IAAI,CAACD,yBAAyB,CAAClJ,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1D,IAAI;MACA,MAAMiB,KAAK,GAAG,MAAM,IAAI,CAACf,eAAe,EAAE;MAC1C,MAAM0B,GAAG,GAAG,MAAMX,KAAK,CAACkK,gCAAgC,CAAChC,EAAE,CAAC;MAC5D,OAAO;QAAE1H,OAAO,EAAE,KAAK;QAAEC,EAAE,EAAE,CAAC;QAAEG,MAAM,EAAED,GAAG,CAACC;MAAO,CAAC;IACxD,CAAC,CACD,OAAOY,GAAG,EAAE;MACR,IAAI,OAAOA,GAAG,CAACO,OAAO,KAAK,QAAQ,IAC/BP,GAAG,CAACO,OAAO,CAACG,KAAK,CAAC,oBAAoB,CAAC,EAAE;QACzC,MAAM5G,gBAAgB,CAACsG,SAAS,CAACsH,QAAQ,CAACO,mBAAmB,CAAC,mCAAmC,CAAC;MACtG;MACA,MAAMjI,GAAG;IACb;EACJ;EACA,MAAMmE,qBAAqB,CAAC5G,MAAM,EAAE;IAChC,IAAI,CAACkK,qBAAqB,EAAE;IAC5B,MAAMkB,SAAS,GAAGjP,MAAM,CAACkP,sBAAsB,CAACrL,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1D,MAAM+D,OAAO,GAAG5H,MAAM,CAAC6H,mBAAmB,CAAChE,MAAM,CAAC,CAAC,CAAC,CAAC;IACrD,IAAI,CAACiJ,mBAAmB,CAAClF,OAAO,CAAC;IACjC,MAAMf,OAAO,GAAG5G,iBAAiB,CAACO,OAAO,CAAC2O,0BAA0B,CAAC;MAAEvL,IAAI,EAAEqL;IAAU,CAAC,CAAC;IACzF,MAAMG,aAAa,GAAG/D,IAAI,CAACC,SAAS,CAAC2D,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IACxD,OAAO,IAAI,CAACd,oBAAoB,CAACtH,OAAO,EAAEe,OAAO,EAAE,KAAK,EAAEwH,aAAa,CAAC;EAC5E;EACA,MAAMvE,qBAAqB,CAAChH,MAAM,EAAE;IAChC,IAAI,CAACkK,qBAAqB,EAAE;IAC5B,MAAMnG,OAAO,GAAG5H,MAAM,CAAC6H,mBAAmB,CAAChE,MAAM,CAAC,CAAC,CAAC,CAAC;IACrD,MAAMoL,SAAS,GAAGjP,MAAM,CAACkP,sBAAsB,CAACrL,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1D,IAAI,CAACiJ,mBAAmB,CAAClF,OAAO,CAAC;IACjC,MAAMf,OAAO,GAAG5G,iBAAiB,CAACO,OAAO,CAAC6O,uBAAuB,CAAC;MAAEzL,IAAI,EAAEqL;IAAU,CAAC,CAAC;IACtF,MAAMG,aAAa,GAAG/D,IAAI,CAACC,SAAS,CAAC2D,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IACxD,OAAO,IAAI,CAACd,oBAAoB,CAACtH,OAAO,EAAEe,OAAO,EAAE,KAAK,EAAEwH,aAAa,CAAC;EAC5E;EACA,MAAMpE,qBAAqB,CAACnH,MAAM,EAAE;IAChC,IAAI,CAACkK,qBAAqB,EAAE;IAC5B,MAAMnG,OAAO,GAAG5H,MAAM,CAAC6H,mBAAmB,CAAChE,MAAM,CAAC,CAAC,CAAC,CAAC;IACrD,MAAMoL,SAAS,GAAGjP,MAAM,CAACkP,sBAAsB,CAACrL,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1D,IAAI,CAACiJ,mBAAmB,CAAClF,OAAO,CAAC;IACjC,MAAMf,OAAO,GAAG5G,iBAAiB,CAACO,OAAO,CAAC8O,uBAAuB,CAAC;MAAE1L,IAAI,EAAEqL;IAAU,CAAC,CAAC;IACtF,MAAMG,aAAa,GAAG/D,IAAI,CAACC,SAAS,CAAC2D,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IACxD,OAAO,IAAI,CAACd,oBAAoB,CAACtH,OAAO,EAAEe,OAAO,EAAE,KAAK,EAAEwH,aAAa,CAAC;EAC5E;EACA,MAAMlE,qBAAqB,CAACrH,MAAM,EAAE;IAChC,MAAMD,IAAI,GAAGC,MAAM,CAAC,CAAC,CAAC;IACtB,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;MAC1B,MAAM,IAAIqC,KAAK,CAAC,4BAA4B,CAAC;IACjD;IACA,MAAMP,MAAM,GAAG,MAAM,IAAI,CAAC1D,gBAAgB,CAAC4B,IAAI,CAAC;IAChD,OAAO;MAAE0B,OAAO,EAAE,KAAK;MAAEC,EAAE,EAAE,CAAC;MAAEG;IAAO,CAAC;EAC5C;EACA0D,oBAAoB,CAACvF,MAAM,EAAE;IACzB,MAAM0L,QAAQ,GAAGvP,MAAM,CAACwP,eAAe,CAAC3L,MAAM,CAAC,CAAC,CAAC,CAAC;IAClD,OAAO,IAAI,CAAClD,eAAe,CAAC8O,eAAe,CAACF,QAAQ,CAAC;EACzD;EACA,MAAMzD,cAAc,CAACjI,MAAM,EAAE;IACzB,MAAM6L,KAAK,GAAG7L,MAAM,CAAC,CAAC,CAAC;IACvB,MAAM0L,QAAQ,GAAG,MAAM,IAAI,CAAC5O,eAAe,CAACgP,SAAS,CAACD,KAAK,CAAC;IAC5D,OAAO;MAAEpK,OAAO,EAAE,KAAK;MAAEC,EAAE,EAAE,CAAC;MAAEG,MAAM,EAAE6J;IAAS,CAAC;EACtD;EACA,MAAMvD,mBAAmB,GAAG;IACxB,MAAMuD,QAAQ,GAAG,MAAM,IAAI,CAAC5O,eAAe,CAACiP,cAAc,EAAE;IAC5D,OAAO;MAAEtK,OAAO,EAAE,KAAK;MAAEC,EAAE,EAAE,CAAC;MAAEG,MAAM,EAAE6J;IAAS,CAAC;EACtD;EACA,MAAMrD,gCAAgC,GAAG;IACrC,MAAMqD,QAAQ,GAAG,MAAM,IAAI,CAAC5O,eAAe,CAACkP,2BAA2B,EAAE;IACzE,OAAO;MAAEvK,OAAO,EAAE,KAAK;MAAEC,EAAE,EAAE,CAAC;MAAEG,MAAM,EAAE6J;IAAS,CAAC;EACtD;EACAnD,qBAAqB,CAACvI,MAAM,EAAE;IAC1B,MAAM0L,QAAQ,GAAGvP,MAAM,CAACwP,eAAe,CAAC3L,MAAM,CAAC,CAAC,CAAC,CAAC;IAClD,OAAO,IAAI,CAAClD,eAAe,CAACmP,gBAAgB,CAACP,QAAQ,CAAC;EAC1D;EACAjD,kBAAkB,CAACzI,MAAM,EAAE;IACvB,MAAM0L,QAAQ,GAAGvP,MAAM,CAACwP,eAAe,CAAC3L,MAAM,CAAC,CAAC,CAAC,CAAC;IAClD,OAAO,IAAI,CAAClD,eAAe,CAACoP,aAAa,CAACR,QAAQ,CAAC;EACvD;EACAxL,eAAe,GAAG;IACd,IAAI,IAAI,CAAChD,MAAM,EAAE;MACb,OAAOqH,OAAO,CAACC,OAAO,CAAC,IAAI,CAACtH,MAAM,CAAC;IACvC;IACA,OAAO,IAAI,CAAC0B,cAAc,EAAE,CAACoC,IAAI,CAACC,KAAK,IAAI;MACvCA,KAAK,CAACkL,kBAAkB,CAAE5N,OAAO,IAAK;QAClC,IAAI,CAACX,kBAAkB,CAAC,IAAI,CAACY,WAAW,EAAE4N,QAAQ,CAAC7N,OAAO,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC;MAC1E,CAAC,CAAC;MACF0C,KAAK,CAACoL,qBAAqB,CAAE5N,UAAU,IAAK;QACxC,IAAI,CAACb,kBAAkB,CAACa,UAAU,EAAE,IAAI,CAACJ,QAAQ,EAAE,IAAI,CAAC;MAC5D,CAAC,CAAC;MACF,IAAI,CAACnB,MAAM,GAAG+D,KAAK;MACnB,OAAOA,KAAK;IAChB,CAAC,CAAC;EACN;AACJ;AACAnF,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB"},"metadata":{},"sourceType":"script"}