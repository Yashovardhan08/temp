{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowWhen(closingSelector) {\n  return function windowWhenOperatorFunction(source) {\n    return source.lift(new WindowOperator(closingSelector));\n  };\n}\nvar WindowOperator = /*@__PURE__*/function () {\n  function WindowOperator(closingSelector) {\n    this.closingSelector = closingSelector;\n  }\n  WindowOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  };\n  return WindowOperator;\n}();\nvar WindowSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(WindowSubscriber, _super);\n  function WindowSubscriber(destination, closingSelector) {\n    var _this = _super.call(this, destination) || this;\n    _this.destination = destination;\n    _this.closingSelector = closingSelector;\n    _this.openWindow();\n    return _this;\n  }\n  WindowSubscriber.prototype.notifyNext = function (_outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n    this.openWindow(innerSub);\n  };\n  WindowSubscriber.prototype.notifyError = function (error) {\n    this._error(error);\n  };\n  WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.openWindow(innerSub);\n  };\n  WindowSubscriber.prototype._next = function (value) {\n    this.window.next(value);\n  };\n  WindowSubscriber.prototype._error = function (err) {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  };\n  WindowSubscriber.prototype._complete = function () {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  };\n  WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  };\n  WindowSubscriber.prototype.openWindow = function (innerSub) {\n    if (innerSub === void 0) {\n      innerSub = null;\n    }\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n    var prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    var window = this.window = new Subject();\n    this.destination.next(window);\n    var closingNotifier;\n    try {\n      var closingSelector = this.closingSelector;\n      closingNotifier = closingSelector();\n    } catch (e) {\n      this.destination.error(e);\n      this.window.error(e);\n      return;\n    }\n    this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n  };\n  return WindowSubscriber;\n}(OuterSubscriber);","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,OAAS,MAAM;AAExB,SAASC,eAAe,YAAQ;AAEhC,SAASC,uBAAmB,oBAAM;AAgDlC,SAAMC,iBAAoB,QAAI,2BAAsC;OAClE,SAAOC,UAAS;SACd,SAAOC,0BAAkC;IACzC;EACH;AAED;IACEC,8BAAoB,YAAsC;WAAtCA,eAAeC,eAAf;IACnB;EAED;gBACS,UAAO,KAAU,GAAI,oBAAiB,QAAU,EAAE;IAC1D;EACH;EAPA,OAOCD;AAOD;IAAkCE,0CAAuBC;EAIvDT,kCAAsB,QACF;WADpBQ,gBAEE,YAAM,iBAAY,EAEnB;IAJqB,kBAAW,KAAX,kBAAsC;IACxCE;IAElBA,KAAI,CAACH,eAAa;;IACnB;EAED;kBAGO,UAAW,WAAU;IAC3B;EAED;kBACc,UAAO;IACpB;EAED;kBACO,UAAW,eAAU;IAC3B;EAES;kBACK,UAAU,CAACI,KAAC;IAC1B;EAES;kBACK,UAAU,CAACC;IACxB,IAAI,CAACC,YAAY,KAAK;IACtB,IAAI,CAACC;IACN;EAES;kBACK,UAAU,CAACC;IACxB,IAAI,CAACF,eAAY;IACjB,IAAI,CAACC;IACN;EAEO;kBACG,yCAAqB;QAC5B,IAAI,CAACE,mBAAmB,EAAC;MAC1B;IACF;EAEO;kBAAW,kCAA+CC;IAChE,IAAIA,QAAQ,KAAE;MACZA,QAAK,GAAM,IAAC;;QAEbA;MAEK,WAAU,SAAQ;MACpBA,oBAAY;;QAEfC;IAED,IAAMA,UAAS;MACXA,UAAC,SAAiB;IAEtB;IACA,IAAIL;QACM;QACRM,eAAe;QAChB;MAAC,IAAQZ,eAAE;MACVY,eAAK,GAAYZ,eAAS;aAE1Ba;MACD;MACG,IAAI,CAACP,MAAK;MACf;IACH;IAvEkC,SAAe,IAuEhD","names":["tslib_1","Subject","OuterSubscriber","subscribeToResult","windowWhen","windowWhenOperatorFunction","WindowOperator","closingSelector","WindowSubscriber","_super","_this","_next","_error","window","destination","_complete","closingNotification","innerSub","prevWindow","closingNotifier","e"],"sources":["../../../src/internal/operators/windowWhen.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}