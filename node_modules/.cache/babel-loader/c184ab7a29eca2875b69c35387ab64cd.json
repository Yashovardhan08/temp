{"ast":null,"code":"/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n  return function multicastOperatorFunction(source) {\n    var subjectFactory;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return subjectOrSubjectFactory;\n      };\n    }\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n    var connectable = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n    return connectable;\n  };\n}\nvar MulticastOperator = /*@__PURE__*/function () {\n  function MulticastOperator(subjectFactory, selector) {\n    this.subjectFactory = subjectFactory;\n    this.selector = selector;\n  }\n  MulticastOperator.prototype.call = function (subscriber, source) {\n    var selector = this.selector;\n    var subject = this.subjectFactory();\n    var subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  };\n  return MulticastOperator;\n}();\nexport { MulticastOperator };","map":{"version":3,"mappings":"AAIA;AA6BA,SAAMA,+BAA0B,6CACmD;OACjF,SAAOC,SAAS,wBAA0B,UAAqB;SAC7D,SAAIC,yBAAiC;IACrC,IAAIC,cAAO;QACT,8BAAmC,eAAwB;MAC5DA;WACC;oBACqB,0BAAwB;QAC3C;MACH;IAED;QACE,OAAOC,QAAO,KAAK,UAAI;MACxB;IAED;IACA,eAAY,GAAMC,MAAG,OAAO;IAC5BC,WAAW,CAACC,eAAc;IAE1BD,WAAkC,eAAY;IAC9C;EACH;AAED;IACEE,iCAAoB,YACA;WADAA,gCAAgC;IAChC,oCAAkD;IACrE;EACD;mBACU,eAAQ,GAAU;IAC1B,IAAMJ,QAAO,GAAG,IAAK;IACrB,IAAMK,cAAY,CAAGN,cAAS,EAAO;IACrC,gBAAgB,GAACC,QAAO,QAAU,WAAU;IAC5CM,YAAO,WAAa;IACrB;EACH;EAXA,OAWCF","names":["connectableObservableDescriptor","multicast","multicastOperatorFunction","subjectFactory","selector","Object","connectable","source","MulticastOperator","subject","subscription"],"sources":["../../../src/internal/operators/multicast.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}