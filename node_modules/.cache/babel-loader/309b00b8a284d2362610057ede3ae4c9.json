{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n  return function (source) {\n    return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n  };\n}\nvar GroupByOperator = /*@__PURE__*/function () {\n  function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n    this.keySelector = keySelector;\n    this.elementSelector = elementSelector;\n    this.durationSelector = durationSelector;\n    this.subjectSelector = subjectSelector;\n  }\n  GroupByOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n  };\n  return GroupByOperator;\n}();\nvar GroupBySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(GroupBySubscriber, _super);\n  function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n    var _this = _super.call(this, destination) || this;\n    _this.keySelector = keySelector;\n    _this.elementSelector = elementSelector;\n    _this.durationSelector = durationSelector;\n    _this.subjectSelector = subjectSelector;\n    _this.groups = null;\n    _this.attemptedToUnsubscribe = false;\n    _this.count = 0;\n    return _this;\n  }\n  GroupBySubscriber.prototype._next = function (value) {\n    var key;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n    this._group(value, key);\n  };\n  GroupBySubscriber.prototype._group = function (value, key) {\n    var groups = this.groups;\n    if (!groups) {\n      groups = this.groups = new Map();\n    }\n    var group = groups.get(key);\n    var element;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = value;\n    }\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject();\n      groups.set(key, group);\n      var groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        var duration = void 0;\n        try {\n          duration = this.durationSelector(new GroupedObservable(key, group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n    if (!group.closed) {\n      group.next(element);\n    }\n  };\n  GroupBySubscriber.prototype._error = function (err) {\n    var groups = this.groups;\n    if (groups) {\n      groups.forEach(function (group, key) {\n        group.error(err);\n      });\n      groups.clear();\n    }\n    this.destination.error(err);\n  };\n  GroupBySubscriber.prototype._complete = function () {\n    var groups = this.groups;\n    if (groups) {\n      groups.forEach(function (group, key) {\n        group.complete();\n      });\n      groups.clear();\n    }\n    this.destination.complete();\n  };\n  GroupBySubscriber.prototype.removeGroup = function (key) {\n    this.groups.delete(key);\n  };\n  GroupBySubscriber.prototype.unsubscribe = function () {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        _super.prototype.unsubscribe.call(this);\n      }\n    }\n  };\n  return GroupBySubscriber;\n}(Subscriber);\nvar GroupDurationSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(GroupDurationSubscriber, _super);\n  function GroupDurationSubscriber(key, group, parent) {\n    var _this = _super.call(this, group) || this;\n    _this.key = key;\n    _this.group = group;\n    _this.parent = parent;\n    return _this;\n  }\n  GroupDurationSubscriber.prototype._next = function (value) {\n    this.complete();\n  };\n  GroupDurationSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n      parent = _a.parent,\n      key = _a.key;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  };\n  return GroupDurationSubscriber;\n}(Subscriber);\nvar GroupedObservable = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(GroupedObservable, _super);\n  function GroupedObservable(key, groupSubject, refCountSubscription) {\n    var _this = _super.call(this) || this;\n    _this.key = key;\n    _this.groupSubject = groupSubject;\n    _this.refCountSubscription = refCountSubscription;\n    return _this;\n  }\n  GroupedObservable.prototype._subscribe = function (subscriber) {\n    var subscription = new Subscription();\n    var _a = this,\n      refCountSubscription = _a.refCountSubscription,\n      groupSubject = _a.groupSubject;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  };\n  return GroupedObservable;\n}(Observable);\nexport { GroupedObservable };\nvar InnerRefCountSubscription = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(InnerRefCountSubscription, _super);\n  function InnerRefCountSubscription(parent) {\n    var _this = _super.call(this) || this;\n    _this.parent = parent;\n    parent.count++;\n    return _this;\n  }\n  InnerRefCountSubscription.prototype.unsubscribe = function () {\n    var parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      _super.prototype.unsubscribe.call(this);\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  };\n  return InnerRefCountSubscription;\n}(Subscription);","map":{"version":3,"mappings":"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","names":["tslib_1","Subscriber","Subscription","Observable","Subject","groupBy","source","GroupByOperator","elementSelector","durationSelector","GroupBySubscriber","_super","_this","key","err","_group","groups","group","element","subjectSelector","groupedObservable","duration","_error","_complete","removeGroup","GroupDurationSubscriber","_a","parent","GroupedObservable","subscriber","refCountSubscription","groupSubject","closed","subscription","InnerRefCountSubscription","prototype","unsubscribe","count"],"sources":["../../../src/internal/operators/groupBy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}