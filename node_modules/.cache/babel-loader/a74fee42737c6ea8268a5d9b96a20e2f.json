{"ast":null,"code":"/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */\nimport { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var config;\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime: windowTime,\n      refCount: false,\n      scheduler: scheduler\n    };\n  }\n  return function (source) {\n    return source.lift(shareReplayOperator(config));\n  };\n}\nfunction shareReplayOperator(_a) {\n  var _b = _a.bufferSize,\n    bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b,\n    _c = _a.windowTime,\n    windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c,\n    useRefCount = _a.refCount,\n    scheduler = _a.scheduler;\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n    var innerSub;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next: function (value) {\n          subject.next(value);\n        },\n        error: function (err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function () {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n      if (isComplete) {\n        subscription = undefined;\n      }\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n    this.add(function () {\n      refCount--;\n      innerSub.unsubscribe();\n      innerSub = undefined;\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}","map":{"version":3,"mappings":"AACA;AAiEA,SAAMA,aAAU,QACd,kBACA;OAGA,SAA8BC;EAC9B,IAAIC;MACFC,kBAAS,WAAwCA;IAClDD;SACC;UACE;MACAE,UAAU;MACVC,UAAU,YAAK;MACfC,UAAS;MACTC;IACH;EACD;EACD;IAAA;EAAA;AAED;SACEC;EAKA,IAAIC,OAAqC,CAACL;IAAAA;IAAAM;IAAAL;IAAAM;IAAAJ;EAC1C,IAAIK;EACJ,IAAIN,YAAsC;EAC1C,IAAIO,YAAW;EACf,IAAIC,WAAU,KAAG;EAEjB,cAAO,GAAS;SAId,SAAWC;IACXT,QAAI;IACJ,IAAIU,QAAQ;QACV,QAAQ,IAAGF,QAAM;MACjBA,QAAO,GAAG,KAAI;MACdF,UAAQ,IAAGZ,aAAQ,CAASI,UAAO;MACnCY,kBAAe,UAAO,KAAU;kBAC1B,SAAC,UAAK;YACR,YAAYC,KAAC,EAAM;UACpBL;QACD;aACE,YAAWM,GAAK;UAChBJ,QAAQ,OAAM;UACfF;QACD;gBACE,cAAkB;UAClBO,aAAY,IAAG;UACfN,YAAQ,YAAW;UACpBD;QACA;MAMH;UACEO,YAAY;QACbN;MACF;WACC;MACDG;IAED;QACE,iBAAW;MACXV,QAAQ,EAAC;MACTU,QAAQ,YAAY,EAAC;MACrBA,QAAI,YAAgB;UAClBH,YAAY,IAAC,WAAc;QAC3BA,YAAY,YAAY,EAAC;QACzBA,YAAU,YAAU;QACrBD;MACA;IACH;EACH","names":["ReplaySubject","shareReplay","config","configOrBufferSize","bufferSize","windowTime","refCount","scheduler","shareReplayOperator","_b","_c","useRefCount","subject","subscription","hasError","shareReplayOperation","innerSub","value","err","isComplete"],"sources":["../../../src/internal/operators/shareReplay.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}