{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function repeatWhen(notifier) {\n  return function (source) {\n    return source.lift(new RepeatWhenOperator(notifier));\n  };\n}\nvar RepeatWhenOperator = /*@__PURE__*/function () {\n  function RepeatWhenOperator(notifier) {\n    this.notifier = notifier;\n  }\n  RepeatWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  };\n  return RepeatWhenOperator;\n}();\nvar RepeatWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RepeatWhenSubscriber, _super);\n  function RepeatWhenSubscriber(destination, notifier, source) {\n    var _this = _super.call(this, destination) || this;\n    _this.notifier = notifier;\n    _this.source = source;\n    _this.sourceIsBeingSubscribedTo = true;\n    return _this;\n  }\n  RepeatWhenSubscriber.prototype.notifyNext = function () {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  };\n  RepeatWhenSubscriber.prototype.notifyComplete = function () {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return _super.prototype.complete.call(this);\n    }\n  };\n  RepeatWhenSubscriber.prototype.complete = function () {\n    this.sourceIsBeingSubscribedTo = false;\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return _super.prototype.complete.call(this);\n      }\n      this._unsubscribeAndRecycle();\n      this.notifications.next(undefined);\n    }\n  };\n  RepeatWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n      notifications = _a.notifications,\n      retriesSubscription = _a.retriesSubscription;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = undefined;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n    this.retries = undefined;\n  };\n  RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n    var _unsubscribe = this._unsubscribe;\n    this._unsubscribe = null;\n    _super.prototype._unsubscribeAndRecycle.call(this);\n    this._unsubscribe = _unsubscribe;\n    return this;\n  };\n  RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n    this.notifications = new Subject();\n    var retries;\n    try {\n      var notifier = this.notifier;\n      retries = notifier(this.notifications);\n    } catch (e) {\n      return _super.prototype.complete.call(this);\n    }\n    this.retries = retries;\n    this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n  };\n  return RepeatWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,OAAS,MAAM;AAIxB,SAASC,2BAAuB;AAgChC,SAAMC,qBAAwB,gBAA6D;OACzF,SAAOC,UAAC,CAAqBC,QAAK;EACnC;IAAA;EAAA;AAED;IACEC,kCAAmF;WAA7DA,mBAAQD,QAAqD;IAClF;EAED;oBACgB,UAAU,KAAI,uBAAqB,QAAU,EAAE;IAC9D;EACH;EAPA,OAOCC;AAOD;IAAyCC,8CAA2BC;EAOlEP,sCAAY,QACQ;WADpBM,oBAGE,YAAM,UAAY,QACnB;IAHmB,4BAA6D;IAC7DE,cAAM,GAANJ,QAAqB;IAJjCI;;IAMP;EAED;sBACO,qBAAgC,GAAC;IACtC,IAAI,CAACC,yBAAuB;IAC7B;EAED;sBACW,yBAA8B,GAAK,YAAE;QAC5C,8BAAa,KAAQ;MACtB;IACF;EAED;sBACO,mBAA4B,GAAK,YAAC;IAEvC,IAAI,CAACA,yBAAgB;QACnB,KAAK,UAAK,EAAO;UACf,KAAK;QACN;MACD;UACE,yBAAa,QAAQ,oBAAG;QACzB;MAED;MACA,IAAI,CAACC,sBAAoB;MAC1B;IACF;EAGD;sBACU,sCAAe;IACvB,IAAIC;MAAAC,aAAe;MAAAC;QACjBD,aAAa,EAAC;MACdA,aAAK,YAAgB;MACtB;IACD;QACEC,mBAAmB,EAAC;MACpBA,mBAAK,YAAsB;MAC5B;IACD;IACD;EAGD;sBACU,iCAAsB;IAE9B,IAAIC,YAAC,GAAY,IAAG,CAAKA,YAAC;IAC1B,iBAAM;IACNP,MAAK,WAAYG,sBAAgB;IAEjC,iBAAY;IACb;EAEO;sBACD,UAAoB,mBAAU;IACnC,IAAI,cAAQ;IACZ,IAAIK;QACM;MACR,YAAU,OAAS,SAAK;MACzBA;IAAC,SACAC;MACD;IACD;IACA,IAAI,CAACD;IACN;EACH;EA7EyC,2BA6ExC","names":["tslib_1","Subject","SimpleOuterSubscriber","repeatWhen","notifier","RepeatWhenOperator","RepeatWhenSubscriber","_super","_this","sourceIsBeingSubscribedTo","_unsubscribeAndRecycle","_a","notifications","retriesSubscription","_unsubscribe","retries","e"],"sources":["../../../src/internal/operators/repeatWhen.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}