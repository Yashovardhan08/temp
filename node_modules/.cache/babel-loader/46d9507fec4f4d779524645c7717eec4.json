{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nexport function bindNodeCallback(callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) {\n          return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args);\n        }));\n      };\n    }\n  }\n  return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var params = {\n      subject: undefined,\n      args: args,\n      callbackFunc: callbackFunc,\n      scheduler: scheduler,\n      context: this\n    };\n    return new Observable(function (subscriber) {\n      var context = params.context;\n      var subject = params.subject;\n      if (!scheduler) {\n        if (!subject) {\n          subject = params.subject = new AsyncSubject();\n          var handler = function () {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n              innerArgs[_i] = arguments[_i];\n            }\n            var err = innerArgs.shift();\n            if (err) {\n              subject.error(err);\n              return;\n            }\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n          try {\n            callbackFunc.apply(context, args.concat([handler]));\n          } catch (err) {\n            if (canReportError(subject)) {\n              subject.error(err);\n            } else {\n              console.warn(err);\n            }\n          }\n        }\n        return subject.subscribe(subscriber);\n      } else {\n        return scheduler.schedule(dispatch, 0, {\n          params: params,\n          subscriber: subscriber,\n          context: context\n        });\n      }\n    });\n  };\n}\nfunction dispatch(state) {\n  var _this = this;\n  var params = state.params,\n    subscriber = state.subscriber,\n    context = state.context;\n  var callbackFunc = params.callbackFunc,\n    args = params.args,\n    scheduler = params.scheduler;\n  var subject = params.subject;\n  if (!subject) {\n    subject = params.subject = new AsyncSubject();\n    var handler = function () {\n      var innerArgs = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        innerArgs[_i] = arguments[_i];\n      }\n      var err = innerArgs.shift();\n      if (err) {\n        _this.add(scheduler.schedule(dispatchError, 0, {\n          err: err,\n          subject: subject\n        }));\n      } else {\n        var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        _this.add(scheduler.schedule(dispatchNext, 0, {\n          value: value,\n          subject: subject\n        }));\n      }\n    };\n    try {\n      callbackFunc.apply(context, args.concat([handler]));\n    } catch (err) {\n      this.add(scheduler.schedule(dispatchError, 0, {\n        err: err,\n        subject: subject\n      }));\n    }\n  }\n  this.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n  var value = arg.value,\n    subject = arg.subject;\n  subject.next(value);\n  subject.complete();\n}\nfunction dispatchError(arg) {\n  var err = arg.err,\n    subject = arg.subject;\n  subject.error(err);\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,kBAAc,eAAM;AAG7B,SAASC,YAAW,yBAAmB;AACvC,SAASC,6BAAsB;AAC/B,SAASC,cAAa,QAAM,wBAAsB;AAClD,SAASC,WAAS,QAAM,qBAAkB;AAoJ1C,SAAMC,OAAU,yBACd;OAKA,SAAIC,gBAAgB;MAClBC,cAAI,EAAY;QACdH,WAAS,CAAGG,cAAc,CAAC;MAC5BC;WAEC;aAAQ,YAAc;gBAAd;aAAA,0BAAc;;QAAK;QAEzB;UAAA;QAAA;MACH;IACF;EAED;SAA2B,YAAc;YAAd;SAAA,0BAAc;;IACvC;QACEC,SAAS;MACTC,OAAI;MACJC;MACAC,YAAS;MACTJ,SAAS,WAAI;MACbK;IACF;WACU,yBAAOC,UAAY;MACrB,4BAAO;MACb,IAAIJ,OAAC,GAASD,MAAE;UACd,UAAK,EAAO;YACV,QAAO,EAAG;UACVC,OAAM,SAAU;cAACK,sBAAmB;yBAAnB,GAAmB,EAAnB;iBAAA,iCAAmB;;YAClC;YAEA,IAAIC,GAAG,GAAEC;gBACPD;cACAN,OAAO;cACR;YAED;YACAA,OAAO,CAACQ,cAAW;YACnBR;UAEF;cACE;YACDE;UAAC,SACAI,GAAI;gBACFb,cAAc,QAAK;cACpBO;mBACC;cACDS;YACF;UACF;QACD;QACD;aACC;QACD;UAAAV;UAAAK;UAAAD;QAAA;MACA;IACH;EACH;AAgBD;SAAAO,cA0BC;EAzBS;EACA;IAAAN,aAAcO;IAAIR,OAAE;EAC5B,IAAID,YAAU,SAAO,aAAQ;IAAAD;IAAAH;EAE7B,IAAIE,OAAC,GAASD;MACZ,QAAO,EAAG;IAEVC,OAAM,SAAU;QAACK,sBAAmB;mBAAnB,GAAmB,EAAnB;WAAA,iCAAmB;;MAClC;MACA,IAAIC,GAAG,GAAEC;UACPD,KAAI;QACLM;UAAAN;UAAAN;QAAA;aACC;QACA,SAAQ,GAACO,SAAU,OAAQ,IAAqB,aAAe,CAAE,EAAE,YAAK;QACzEK;UAAAC;UAAAb;QAAA;MACD;IAEF;QACE;MACDE;IAAC,SACAI,GAAK,EAAG;MACT;QAAAA;QAAAN;MAAA;IACF;EAED;EACD;AAOD;SACUc,gBAAK,EAAE;EACf,SAAQ,GAAIC,GAAC,MAAO;IAAAf;EACpBA,OAAO,CAACQ,UAAU,CAAC;EACpBR;AAOD;SACUgB,aAAG,CAAED;EACb,OAAO,GAACA,GAAK,CAACT,GAAG;IAAEN;EACpBA","names":["Observable","AsyncSubject","map","canReportError","isScheduler","isArray","bindNodeCallback","resultSelector","scheduler","params","subject","args","callbackFunc","context","subscriber","handler","err","innerArgs","next","console","dispatch","state","_this","value","dispatchNext","arg","dispatchError"],"sources":["../../../src/internal/observable/bindNodeCallback.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}