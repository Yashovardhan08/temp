{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n  return function (source) {\n    return source.lift(new RetryWhenOperator(notifier, source));\n  };\n}\nvar RetryWhenOperator = /*@__PURE__*/function () {\n  function RetryWhenOperator(notifier, source) {\n    this.notifier = notifier;\n    this.source = source;\n  }\n  RetryWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  };\n  return RetryWhenOperator;\n}();\nvar RetryWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RetryWhenSubscriber, _super);\n  function RetryWhenSubscriber(destination, notifier, source) {\n    var _this = _super.call(this, destination) || this;\n    _this.notifier = notifier;\n    _this.source = source;\n    return _this;\n  }\n  RetryWhenSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var errors = this.errors;\n      var retries = this.retries;\n      var retriesSubscription = this.retriesSubscription;\n      if (!retries) {\n        errors = new Subject();\n        try {\n          var notifier = this.notifier;\n          retries = notifier(errors);\n        } catch (e) {\n          return _super.prototype.error.call(this, e);\n        }\n        retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n      } else {\n        this.errors = undefined;\n        this.retriesSubscription = undefined;\n      }\n      this._unsubscribeAndRecycle();\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n      errors.next(err);\n    }\n  };\n  RetryWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n      errors = _a.errors,\n      retriesSubscription = _a.retriesSubscription;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = undefined;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n    this.retries = undefined;\n  };\n  RetryWhenSubscriber.prototype.notifyNext = function () {\n    var _unsubscribe = this._unsubscribe;\n    this._unsubscribe = null;\n    this._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n    this.source.subscribe(this);\n  };\n  return RetryWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,OAAS,MAAM;AAIxB,SAASC,2BAAuB;AAgBhC,SAAMC,qBAAuB,gBAAsD;OACjF,SAAOC,SAAC,SAA0B;EACnC;IAAA;EAAA;AAED;IACEC,iCAA4E,YACjC;WADrBA,0BAAsD;IACtD,aAAM,GAANC,QAAqB;IAC1C;EAED;mBACe,CAACC,SAAS,CAACC,IAAI,uBAAoB,QAAU,EAAE;IAC7D;EACH;EARA,OAQCH;AAOD;IAAwCI,6CAA2BC;EAMjET,qCAAY,QACQ;WADpBQ,mBAGE,YAAM,UAAY,QACnB;IAHmB,4BAAsD;IACtDE,cAAM,GAANL,QAAqB;;IAExC;EAED;qBACY,UAAW;QAEnB,KAAI,UAAS,EAAI;MACjB,IAAIM,SAAO,IAAQ,CAAIA,MAAC;MACxB,IAAIC,sBAAsB;MAE1B,IAAIC,mBAAU;UACZ,QAAM,EAAG;QACTF,MAAI;YACM;UACR,YAAU,OAAS,SAAQ;UAC5BC;QAAC,SACAE;UACD;QACD;QACDD;aACC;QACA,IAAI,CAACF;QACN;MAED;MAEA,IAAI,CAACI,sBAAgB;MACrB,IAAI,CAACJ,SAAOA,MAAG;MACf,IAAI,CAACC;MAEL,wBAAkB;MACnBD;IACF;EAGD;qBACU,uBAAQ;IAChB,IAAIK,SAAQ;MAAAL;MAAAE;QACVF,MAAM,EAAC;MACPA,MAAK,YAAS;MACf;IACD;QACEE,mBAAmB,EAAC;MACpBA,mBAAK,YAAsB;MAC5B;IACD;IACD;EAED;qBACU,qBAAY,GAAU;IAE9B,IAAII,YAAC,GAAY,IAAG,CAAKA,YAAC;IAC1B,IAAI,CAACA;IACL,IAAI,CAACF,sBAAe;IAEpB,IAAI,CAACE,YAAO,eAAgB;IAC7B;EACH;EAlEwC,0BAkEvC","names":["tslib_1","Subject","SimpleOuterSubscriber","retryWhen","RetryWhenOperator","notifier","prototype","call","RetryWhenSubscriber","_super","_this","errors","retries","retriesSubscription","e","_unsubscribeAndRecycle","_a","_unsubscribe"],"sources":["../../../src/internal/operators/retryWhen.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}