{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\nvar NONE = {};\nexport function combineLatest() {\n  var observables = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n  var resultSelector = undefined;\n  var scheduler = undefined;\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = observables.pop();\n  }\n  if (typeof observables[observables.length - 1] === 'function') {\n    resultSelector = observables.pop();\n  }\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = observables[0];\n  }\n  return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\n}\nvar CombineLatestOperator = /*@__PURE__*/function () {\n  function CombineLatestOperator(resultSelector) {\n    this.resultSelector = resultSelector;\n  }\n  CombineLatestOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n  };\n  return CombineLatestOperator;\n}();\nexport { CombineLatestOperator };\nvar CombineLatestSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(CombineLatestSubscriber, _super);\n  function CombineLatestSubscriber(destination, resultSelector) {\n    var _this = _super.call(this, destination) || this;\n    _this.resultSelector = resultSelector;\n    _this.active = 0;\n    _this.values = [];\n    _this.observables = [];\n    return _this;\n  }\n  CombineLatestSubscriber.prototype._next = function (observable) {\n    this.values.push(NONE);\n    this.observables.push(observable);\n  };\n  CombineLatestSubscriber.prototype._complete = function () {\n    var observables = this.observables;\n    var len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (var i = 0; i < len; i++) {\n        var observable = observables[i];\n        this.add(subscribeToResult(this, observable, undefined, i));\n      }\n    }\n  };\n  CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  };\n  CombineLatestSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {\n    var values = this.values;\n    var oldVal = values[outerIndex];\n    var toRespond = !this.toRespond ? 0 : oldVal === NONE ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n    if (toRespond === 0) {\n      if (this.resultSelector) {\n        this._tryResultSelector(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  };\n  CombineLatestSubscriber.prototype._tryResultSelector = function (values) {\n    var result;\n    try {\n      result = this.resultSelector.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  };\n  return CombineLatestSubscriber;\n}(OuterSubscriber);\nexport { CombineLatestSubscriber };","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,aAAc,OAAM;AAC7B,SAASC,WAAU,QAAM,qBAAkB;AAE3C,SAASC,eAAe,iBAAQ;AAGhC,SAASC,uBAAmB,oBAAM;AAClC,SAASC,iBAAiB,mCAAc;AAExC,SAAUC,SAAM;AAsNhB,QAAM;OACJ,sBAAgF;iBAAA,GAAhF;OAAA,iCAAgF;;EAEhF;EACA,IAAIC,cAAqC,YAAU;EAEnD,IAAIC,YAAYC;MACdP,WAAS,CAAGQ,WAAW,CAACA,WAAuB;IAChDF;EAED;MACE,kBAAiB,YAAY,OAAsC;IACpED;EAID;MACEG,WAAW,OAAG,UAAqBP,OAAC;IACrCO;EAED;EACD;AAED;IACEC,qCAAoB,YAA6C;WAA7CA,oCAA6C;IAChE;EAED;uBACgB,UAAU,CAAIC,2BAAwB,QAAU,EAAE;IACjE;EACH;EAPA,OAOCD;;AAOD;IAAmDE,iDAAqBC;EAMtEb,yCAAY,QAAoC;WAAhDY,uBACE,YAAM,EAAYN,cACnB;IAF+C,yCAA6C;IALrFQ,oBAAmB;IACnBA,YAAM,GAAU;IAChBA,iBAAW;;IAKlB;EAES;yBACS,UAAM;IACvB,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC;IACvB;EAES;yBACY,UAAK,UAAY;IACrC,IAAMP,WAAM,OAAY,YAAO;IAC/B,IAAIQ,GAAG,cAAQ;QACbA,QAAK;MACN;WACC;MACA,IAAI,CAACC,SAASD,GAAG;MACjB,KAAKE,SAAS,GAAGF,GAAG;WAClB,IAAMG,WAAUH,GAAG;QACnB,IAAII,UAAK,cAAkB,GAAI;QAChC;MACF;IACF;EAED;yBACkB,CAAIC,SAAQ,CAAEC;QAC5B,KAAK,WAAW,CAAC,SAAS;MAC3B;IACF;EAED;yBAEsB,UAAO;IAC3B,IAAMR,MAAM,GAAG,WAAO;IACtB,IAAMS,SAAST,MAAI,WAAK,CAAS;QAC/BI,SAAG,qBACD,IACEK,MAAC,KAAUR,IAAI,UAAUG,SAAC;IAEhCJ,MAAI,WAAS,CAAK,GAAGU;QACnBN,SAAS;UACP,IAAI,CAACb;QACN;aACC;QACD;MACF;IACF;EAEO;yBACU;IAChB,IAAIoB;QACF;MACDA;IAAC,SACAC,GAAK;MACL,gBAAO;MACR;IACD;IACD;EACH;EAhEmD,8BAgElD","names":["tslib_1","isScheduler","isArray","OuterSubscriber","subscribeToResult","fromArray","resultSelector","scheduler","undefined","observables","CombineLatestOperator","call","CombineLatestSubscriber","_super","_this","values","NONE","len","active","toRespond","i","observable","prototype","notifyComplete","oldVal","innerValue","result","err"],"sources":["../../../src/internal/observable/combineLatest.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}