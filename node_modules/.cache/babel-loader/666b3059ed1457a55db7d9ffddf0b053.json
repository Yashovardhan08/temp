{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge() {\n  var observables = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n  var concurrent = Number.POSITIVE_INFINITY;\n  var scheduler = null;\n  var last = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = observables.pop();\n  }\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return observables[0];\n  }\n  return mergeAll(concurrent)(fromArray(observables, scheduler));\n}","map":{"version":3,"mappings":"AAAA;AAEA,SAASA,kBAAa,eAAM;AAC5B,SAASC,WAAU,QAAM,qBAAwB;AACjD,SAASC,gBAAW,uBAAoB;AAqHxC,SAAMC,SAAU,QAAK;OAAO;iBAAoE,GAApE;OAAA,iCAAoE;;EAC/F;EACA,IAAIC,UAAS,GAAkBC,MAAK;EACnC,IAAIC,SAAY;EAChB,IAAIC,kBAAiB,CAAEC;MACrBP,WAAS,CAAkBM;IAC3BD,SAAI,cAAkB,IAAI;QACxBE,WAAU,OAAW,QAAY,OAAMA;MACxCJ;IACF;SACC,WAAUG,IAAW,aAAe,EAAG;IACxCH;EAED;MACEE,SAAsB,SAAW,IAAIE;IACtC;EAED;EACD","names":["Observable","isScheduler","mergeAll","fromArray","concurrent","Number","scheduler","last","observables"],"sources":["../../../src/internal/observable/merge.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}