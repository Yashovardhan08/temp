{"ast":null,"code":"/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nvar Subscription = /*@__PURE__*/function () {\n  function Subscription(unsubscribe) {\n    this.closed = false;\n    this._parentOrParents = null;\n    this._subscriptions = null;\n    if (unsubscribe) {\n      this._ctorUnsubscribe = true;\n      this._unsubscribe = unsubscribe;\n    }\n  }\n  Subscription.prototype.unsubscribe = function () {\n    var errors;\n    if (this.closed) {\n      return;\n    }\n    var _a = this,\n      _parentOrParents = _a._parentOrParents,\n      _ctorUnsubscribe = _a._ctorUnsubscribe,\n      _unsubscribe = _a._unsubscribe,\n      _subscriptions = _a._subscriptions;\n    this.closed = true;\n    this._parentOrParents = null;\n    this._subscriptions = null;\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (var index = 0; index < _parentOrParents.length; ++index) {\n        var parent_1 = _parentOrParents[index];\n        parent_1.remove(this);\n      }\n    }\n    if (isFunction(_unsubscribe)) {\n      if (_ctorUnsubscribe) {\n        this._unsubscribe = undefined;\n      }\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n    if (isArray(_subscriptions)) {\n      var index = -1;\n      var len = _subscriptions.length;\n      while (++index < len) {\n        var sub = _subscriptions[index];\n        if (isObject(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n            if (e instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n    if (errors) {\n      throw new UnsubscriptionError(errors);\n    }\n  };\n  Subscription.prototype.add = function (teardown) {\n    var subscription = teardown;\n    if (!teardown) {\n      return Subscription.EMPTY;\n    }\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(teardown);\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          var tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        {\n          throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n    }\n    var _parentOrParents = subscription._parentOrParents;\n    if (_parentOrParents === null) {\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        return subscription;\n      }\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      _parentOrParents.push(this);\n    } else {\n      return subscription;\n    }\n    var subscriptions = this._subscriptions;\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n    return subscription;\n  };\n  Subscription.prototype.remove = function (subscription) {\n    var subscriptions = this._subscriptions;\n    if (subscriptions) {\n      var subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  };\n  Subscription.EMPTY = function (empty) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription());\n  return Subscription;\n}();\nexport { Subscription };\nfunction flattenUnsubscriptionErrors(errors) {\n  return errors.reduce(function (errs, err) {\n    return errs.concat(err instanceof UnsubscriptionError ? err.errors : err);\n  }, []);\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,eAAU,gBAAM;AACzB,SAASC,gBAAY,iBAAM;AAC3B,SAASC,qCAA2B;AAepC;IAsBEC,4BAAY,YAAwB;WAX7BA,YAAkB,YAAM;IAGrB;IAEF,qBAAc,GAAuB,IAAK;IAOhD,IAAI,eAAa;QACdC,WAAa;MACb,IAAY,CAACC,gBAAe;MAC9B;IACF;EAQD;cACM,UAAc;IAElB,IAAIC,MAAK;QACP,WAAO;MACR;IAEG;IAEJ,IAAIC,EAAC,OAAM;MAAGC,gBAAK;MAAAH;MAAAI;MAAAC;IACnB,IAAI,CAACC;IAGL,IAAI,CAACH,gBAAc,GAAG,IAAK;IAE3B,IAAI,kBAAgB;QAClBA,gBAAgB,YAAYL,YAAE;MAC/BK;WACC,IAAKA,gBAAe,KAAK,IAAG;WAC1B,IAAMI,QAAM,GAAGA,wBAAwB;QACvC,YAAO,GAAMJ,gBAAO;QACrBK;MACF;IAED;QAUEX,UAAI,aAAkB;UACnBG,gBAAa,EAAY;QAC3B;MACD;UACE;QACDI;MAAC,SACAK,GAAM;QACPR;MACF;IAED;QACEN,OAAI,eAAW;MACf,IAAIY,KAAG,GAAG;MAEV,OAAO,GAAEF,cAAa;aACpB,EAAME,KAAM;QACZ,IAAIG,oBAAe;YACjBd,QAAI;cACF;YACDc;UAAC,SACAD,GAAM;YACNR,MAAK,aAAY;gBACfQ,aAASE,mBAAc;cACxBV;mBACC;cACDA;YACF;UACF;QACF;MACF;IAED;QACEA,MAAM;MACP;IACF;EAsBD;cACM,UAAY,CAAkBW,gBAAUC;IAE5C,IAAIC,YAAW;QACb,SAAO;MACR;IAED;YACE,OAAKD,QAAU;WACb;QACFC,YAAa;WACX,QAAI;YAEFA,YAAO,SAAa;UACrB;eACC,eAAa;UACbA,YAAO,YAAa;UACrB;eACC,IAAM,EAAGA,YAAG,YAAahB;UACzB,sBAAmB;UACnBgB,YAAY,GAAC,gBAAkB;UAChCA;QACD;QACF;;QACE;UACD;QACF;IAAA;IAID,IAAIX,gBAAgB,eAAW;QAG7BA,gBAAa;MACdW;WACC,IAAIX,gBAAgB,YAAWL;UAE7BK,gBAAO,KAAa;QACrB;MAGD;MACDW;WAEC,oBAAqB,CAACC,OAAM;MAC7BZ;WAEC;MACD;IAGD;IACA,IAAIa,aAAa,OAAK,eAAM;QAC1BA,aAAK,SAAiB,EAAC;MACxB;WACC;MACDA;IAED;IACD;EAQD;cACQ,UAAa,OAAQ,yBAAe;IAC1C,IAAIA,aAAa,GAAE;QACjBA,aAAM;MACN,IAAIC,iBAAiB,gBAAS;UAC5BA,iBAAc,KAAO;QACtBD;MACF;IACF;EAtMa;cACN,MAAM,GAAG,UAAKE;IACpBA,YAAY,GAAC;IACb,OAAIA;EAoMR,oBAAC;EAzMD,OAyMCpB;;AAED,SAASA;SACRqB,2BAAsB,OAAM,EAAG;EAC/B;IAAA;EAAA","names":["isArray","isObject","isFunction","Subscription","unsubscribe","_ctorUnsubscribe","errors","_a","_parentOrParents","_unsubscribe","_subscriptions","closed","index","parent_1","e","sub","UnsubscriptionError","add","teardown","subscription","indexOf","subscriptions","subscriptionIndex","empty","flattenUnsubscriptionErrors"],"sources":["../../src/internal/Subscription.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}