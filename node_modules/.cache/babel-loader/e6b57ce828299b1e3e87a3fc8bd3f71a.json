{"ast":null,"code":"import { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\nrequire('dotenv').config();\nconst supportChainIdList = [1, 3, 4, 5, 42, 137, 1337, 80001];\nconst getRpcEndpoint = chainId => {\n  const endpoints = {\n    1: 'mainnet',\n    3: 'ropsten',\n    4: 'rinkeby',\n    5: 'goerli',\n    42: 'kovan',\n    137: 'polygon',\n    80001: 'mumbai'\n  };\n  return `https://${endpoints[chainId] || 'mainnet'}.infura.io/v3/c9d981d1a6814120a7cf4c76b7455edc` || process.env.INFURA_ID;\n};\nconst rpcEndpointList = supportChainIdList.reduce((accumulator, currentValue) => ({\n  ...accumulator,\n  [currentValue]: getRpcEndpoint(currentValue)\n}), {});\n\n// reset WalletConnect connector\nexport const resetWalletConnectConnector = connector => {\n  var _connector$walletConn, _connector$walletConn2;\n  if (connector && connector instanceof WalletConnectConnector && (_connector$walletConn = connector.walletConnectProvider) !== null && _connector$walletConn !== void 0 && (_connector$walletConn2 = _connector$walletConn.wc) !== null && _connector$walletConn2 !== void 0 && _connector$walletConn2.uri) {\n    connector.walletConnectProvider = undefined;\n  }\n};\nexport const injected = new InjectedConnector({\n  supportedChainIds: supportChainIdList\n});\nexport const walletconnect = new WalletConnectConnector({\n  rpc: rpcEndpointList,\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 12000\n});\nexport const walletlink = new WalletLinkConnector({\n  url: getRpcEndpoint(1),\n  appName: 'Create React Ethereum DApp',\n  supportedChainIds: [1]\n});\nexport const connectorList = {\n  MetaMask: injected,\n  WalletConnect: walletconnect,\n  WalletLink: walletlink\n};\nexport default connectorList;","map":{"version":3,"names":["InjectedConnector","WalletConnectConnector","WalletLinkConnector","require","config","supportChainIdList","getRpcEndpoint","chainId","endpoints","process","env","INFURA_ID","rpcEndpointList","reduce","accumulator","currentValue","resetWalletConnectConnector","connector","walletConnectProvider","wc","uri","undefined","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","pollingInterval","walletlink","url","appName","connectorList","MetaMask","WalletConnect","WalletLink"],"sources":["/Users/radioactivedevil08/Polygon/temp/src/lib/connectors/index.js"],"sourcesContent":["import {InjectedConnector} from '@web3-react/injected-connector';\nimport {WalletConnectConnector} from '@web3-react/walletconnect-connector';\nimport {WalletLinkConnector} from '@web3-react/walletlink-connector';\n\nrequire('dotenv').config();\n\nconst supportChainIdList = [1, 3, 4, 5, 42, 137, 1337, 80001];\n\nconst getRpcEndpoint = (chainId) => {\n  const endpoints = {\n    1: 'mainnet',\n    3: 'ropsten',\n    4: 'rinkeby',\n    5: 'goerli',\n    42: 'kovan',\n    137: 'polygon',\n    80001: 'mumbai',\n  };\n\n  return `https://${\n  endpoints[chainId] || 'mainnet'\n  }.infura.io/v3/c9d981d1a6814120a7cf4c76b7455edc` || process.env.INFURA_ID;\n};\n\nconst rpcEndpointList = supportChainIdList.reduce(\n(accumulator, currentValue) => ({\n  ...accumulator,\n  [currentValue]: getRpcEndpoint(currentValue),\n}),\n{}\n);\n\n// reset WalletConnect connector\nexport const resetWalletConnectConnector = (connector) => {\n  if (\n  connector &&\n  connector instanceof WalletConnectConnector &&\n  connector.walletConnectProvider?.wc?.uri\n  ) {\n    connector.walletConnectProvider = undefined;\n  }\n};\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: supportChainIdList,\n});\n\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: rpcEndpointList,\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 12000,\n});\n\nexport const walletlink = new WalletLinkConnector({\n  url: getRpcEndpoint(1),\n  appName: 'Create React Ethereum DApp',\n  supportedChainIds: [1],\n});\n\nexport const connectorList = {\n  MetaMask: injected,\n  WalletConnect: walletconnect,\n  WalletLink: walletlink,\n};\n\nexport default connectorList;\n"],"mappings":"AAAA,SAAQA,iBAAiB,QAAO,gCAAgC;AAChE,SAAQC,sBAAsB,QAAO,qCAAqC;AAC1E,SAAQC,mBAAmB,QAAO,kCAAkC;AAEpEC,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,EAAE;AAE1B,MAAMC,kBAAkB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC;AAE7D,MAAMC,cAAc,GAAIC,OAAO,IAAK;EAClC,MAAMC,SAAS,GAAG;IAChB,CAAC,EAAE,SAAS;IACZ,CAAC,EAAE,SAAS;IACZ,CAAC,EAAE,SAAS;IACZ,CAAC,EAAE,QAAQ;IACX,EAAE,EAAE,OAAO;IACX,GAAG,EAAE,SAAS;IACd,KAAK,EAAE;EACT,CAAC;EAED,OAAQ,WACRA,SAAS,CAACD,OAAO,CAAC,IAAI,SACrB,gDAA+C,IAAIE,OAAO,CAACC,GAAG,CAACC,SAAS;AAC3E,CAAC;AAED,MAAMC,eAAe,GAAGP,kBAAkB,CAACQ,MAAM,CACjD,CAACC,WAAW,EAAEC,YAAY,MAAM;EAC9B,GAAGD,WAAW;EACd,CAACC,YAAY,GAAGT,cAAc,CAACS,YAAY;AAC7C,CAAC,CAAC,EACF,CAAC,CAAC,CACD;;AAED;AACA,OAAO,MAAMC,2BAA2B,GAAIC,SAAS,IAAK;EAAA;EACxD,IACAA,SAAS,IACTA,SAAS,YAAYhB,sBAAsB,6BAC3CgB,SAAS,CAACC,qBAAqB,4EAA/B,sBAAiCC,EAAE,mDAAnC,uBAAqCC,GAAG,EACtC;IACAH,SAAS,CAACC,qBAAqB,GAAGG,SAAS;EAC7C;AACF,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,IAAItB,iBAAiB,CAAC;EAC5CuB,iBAAiB,EAAElB;AACrB,CAAC,CAAC;AAGF,OAAO,MAAMmB,aAAa,GAAG,IAAIvB,sBAAsB,CAAC;EACtDwB,GAAG,EAAEb,eAAe;EACpBc,MAAM,EAAE,kCAAkC;EAC1CC,MAAM,EAAE,IAAI;EACZC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEF,OAAO,MAAMC,UAAU,GAAG,IAAI3B,mBAAmB,CAAC;EAChD4B,GAAG,EAAExB,cAAc,CAAC,CAAC,CAAC;EACtByB,OAAO,EAAE,4BAA4B;EACrCR,iBAAiB,EAAE,CAAC,CAAC;AACvB,CAAC,CAAC;AAEF,OAAO,MAAMS,aAAa,GAAG;EAC3BC,QAAQ,EAAEX,QAAQ;EAClBY,aAAa,EAAEV,aAAa;EAC5BW,UAAU,EAAEN;AACd,CAAC;AAED,eAAeG,aAAa"},"metadata":{},"sourceType":"module"}